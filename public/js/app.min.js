// Slider
(function(c,I,B){c.fn.responsiveSlides=function(l){var a=c.extend({auto:!0,speed:100,timeout:4E3,pager:!1,nav:!1,random:!1,pause:!1,pauseControls:!0,prevText:"Previous",nextText:"Next",maxwidth:"",navContainer:"",manualControls:"",namespace:"rslides",before:c.noop,after:c.noop},l);return this.each(function(){B++;var f=c(this),s,r,t,m,p,q,n=0,e=f.children(),C=e.size(),h=parseFloat(a.speed),D=parseFloat(a.timeout),u=parseFloat(a.maxwidth),g=a.namespace,d=g+B,E=g+"_nav "+d+"_nav",v=g+"_here",j=d+"_on",
    w=d+"_s",k=c("<ul class='"+g+"_tabs "+d+"_tabs' />"),x={"float":"left",position:"relative",opacity:1,zIndex:2},y={"float":"none",position:"absolute",opacity:0,zIndex:1},F=function(){var b=(document.body||document.documentElement).style,a="transition";if("string"===typeof b[a])return!0;s=["Moz","Webkit","Khtml","O","ms"];var a=a.charAt(0).toUpperCase()+a.substr(1),c;for(c=0;c<s.length;c++)if("string"===typeof b[s[c]+a])return!0;return!1}(),z=function(b){a.before(b);F?(e.removeClass(j).css(y).eq(b).addClass(j).css(x),
        n=b,setTimeout(function(){a.after(b)},h)):e.stop().fadeOut(h,function(){c(this).removeClass(j).css(y).css("opacity",1)}).eq(b).fadeIn(h,function(){c(this).addClass(j).css(x);a.after(b);n=b})};a.random&&(e.sort(function(){return Math.round(Math.random())-0.5}),f.empty().append(e));e.each(function(a){this.id=w+a});f.addClass(g+" "+d);l&&l.maxwidth&&f.css("max-width",u);e.hide().css(y).eq(0).addClass(j).css(x).show();F&&e.show().css({"-webkit-transition":"opacity "+h+"ms ease-in-out, 5s transform linear","-moz-transition":"opacity "+
        h+"ms ease-in-out, 5s transform linear","-o-transition":"opacity "+h+"ms ease-in-out, 5s transform linear",transition:"opacity "+h+"ms ease-in-out, 5s transform linear"});if(1<e.size()){if(D<h+100)return;if(a.pager&&!a.manualControls){var A=[];e.each(function(a){a+=1;A+="<li><a href='#' class='"+w+a+"'>"+a+"</a></li>"});k.append(A);l.navContainer?c(a.navContainer).append(k):f.after(k)}a.manualControls&&(k=c(a.manualControls),k.addClass(g+"_tabs "+d+"_tabs"));(a.pager||a.manualControls)&&k.find("li").each(function(a){c(this).addClass(w+(a+1))});if(a.pager||a.manualControls)q=
    k.find("a"),r=function(a){q.closest("li").removeClass(v).eq(a).addClass(v)};a.auto&&(t=function(){p=setInterval(function(){e.stop(!0,!0);var b=n+1<C?n+1:0;(a.pager||a.manualControls)&&r(b);z(b)},D)},t());m=function(){a.auto&&(clearInterval(p),t())};a.pause&&f.hover(function(){clearInterval(p)},function(){m()});if(a.pager||a.manualControls)q.bind("click",function(b){b.preventDefault();a.pauseControls||m();b=q.index(this);n===b||c("."+j).queue("fx").length||(r(b),z(b))}).eq(0).closest("li").addClass(v),
a.pauseControls&&q.hover(function(){clearInterval(p)},function(){m()});if(a.nav){g="<a href='#' class='"+E+" prev'> </a><a href='#' class='"+E+" next'> </a>";l.navContainer?c(a.navContainer).append(g):f.after(g);var d=c("."+d+"_nav"),G=d.filter(".prev");d.bind("click",function(b){b.preventDefault();b=c("."+j);if(!b.queue("fx").length){var d=e.index(b);b=d-1;d=d+1<C?n+1:0;z(c(this)[0]===G[0]?b:d);if(a.pager||a.manualControls)r(c(this)[0]===G[0]?b:d);a.pauseControls||m()}});
    a.pauseControls&&d.hover(function(){clearInterval(p)},function(){m()})}}if("undefined"===typeof document.body.style.maxWidth&&l.maxwidth){var H=function(){f.css("width","100%");f.width()>u&&f.css("width",u)};H();c(I).bind("resize",function(){H()})}})}})(jQuery,this,0);

// Easing
jQuery.easing.jswing=jQuery.easing.swing,jQuery.extend(jQuery.easing,{def:"easeInOutExpo",swing:function(e,n,u,i,r){return jQuery.easing[jQuery.easing.def](e,n,u,i,r)},easeInOutExpo:function(e,n,u,i,r){return 0===n?u:n===r?u+i:(n/=r/2)<1?i/2*Math.pow(2,10*(n-1))+u:i/2*(2-Math.pow(2,-10*--n))+u}});

// Readmore
!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(jQuery)}((function(e){"use strict";var t="readmore",i={speed:100,collapsedHeight:200,heightMargin:16,moreLink:'<a href="#">Read More</a>',lessLink:'<a href="#">Close</a>',embedCSS:!0,blockCSS:"display: block; width: 100%;",startOpen:!1,blockProcessed:function(){},beforeToggle:function(){},afterToggle:function(){}},o={},a=0;function n(e){var t=e.clone().css({height:"auto",width:e.width(),maxHeight:"none",overflow:"hidden"}).insertAfter(e),i=t.outerHeight(),o=parseInt(t.css({maxHeight:""}).css("max-height").replace(/[^-\d\.]/g,""),10),a=e.data("defaultHeight");t.remove();var n=o||e.data("collapsedHeight")||a;e.data({expandedHeight:i,maxHeight:o,collapsedHeight:n}).css({maxHeight:"none"})}var s,r,d,h,l=(s=function(){e("[data-readmore]").each((function(){var t=e(this),i="true"===t.attr("aria-expanded");n(t),t.css({height:t.data(i?"expandedHeight":"collapsedHeight")})}))},r=100,function(){var e=this,t=arguments,i=d&&!h;clearTimeout(h),h=setTimeout((function(){h=null,d||s.apply(e,t)}),r),i&&s.apply(e,t)});function c(a,n){this.element=a,this.options=e.extend({},i,n),function(e){if(!o[e.selector]){var t=" ";e.embedCSS&&""!==e.blockCSS&&(t+=e.selector+" + [data-readmore-toggle], "+e.selector+"[data-readmore]{"+e.blockCSS+"}"),a=t+=e.selector+"[data-readmore]{transition: height "+e.speed+"ms;overflow: hidden;}",(n=(i=document).createElement("style")).type="text/css",n.styleSheet?n.styleSheet.cssText=a:n.appendChild(i.createTextNode(a)),i.getElementsByTagName("head")[0].appendChild(n),o[e.selector]=!0}var i,a,n}(this.options),this._defaults=i,this._name=t,this.init(),window.addEventListener?(window.addEventListener("load",l),window.addEventListener("resize",l)):(window.attachEvent("load",l),window.attachEvent("resize",l))}c.prototype={init:function(){var t=e(this.element);t.data({defaultHeight:this.options.collapsedHeight,heightMargin:this.options.heightMargin}),n(t);var i=t.data("collapsedHeight"),o=t.data("heightMargin");if(t.outerHeight(!0)<=i+o)return this.options.blockProcessed&&"function"==typeof this.options.blockProcessed&&this.options.blockProcessed(t,!1),!0;var s,r=t.attr("id")||function(e){var t=++a;return String(null===e?"rmjs-":e)+t}(),d=this.options.startOpen?this.options.lessLink:this.options.moreLink;t.attr({"data-readmore":"","aria-expanded":this.options.startOpen,id:r}),t.after(e(d).on("click",(s=this,function(e){s.toggle(this,t[0],e)})).attr({"data-readmore-toggle":r,"aria-controls":r})),this.options.startOpen||t.css({height:i}),this.options.blockProcessed&&"function"==typeof this.options.blockProcessed&&this.options.blockProcessed(t,!0)},toggle:function(t,i,o){o&&o.preventDefault(),t||(t=e('[aria-controls="'+this.element.id+'"]')[0]),i||(i=this.element);var a,n=e(i),s="",r="",d=!1,h=n.data("collapsedHeight");n.height()<=h?(s=n.data("expandedHeight")+"px",r="lessLink",d=!0):(s=h,r="moreLink"),this.options.beforeToggle&&"function"==typeof this.options.beforeToggle&&this.options.beforeToggle(t,n,!d),n.css({height:s}),n.on("transitionend",(a=this,function(){a.options.afterToggle&&"function"==typeof a.options.afterToggle&&a.options.afterToggle(t,n,d),e(this).attr({"aria-expanded":d}).off("transitionend")})),e(t).replaceWith(e(this.options[r]).on("click",function(e){return function(t){e.toggle(this,i,t)}}(this)).attr({"data-readmore-toggle":n.attr("id"),"aria-controls":n.attr("id")}))},destroy:function(){e(this.element).each((function(){var t=e(this);t.attr({"data-readmore":null,"aria-expanded":null}).css({maxHeight:"",height:""}).next("[data-readmore-toggle]").remove(),t.removeData()}))}},e.fn.readmore=function(i){var o=arguments,a=this.selector;return"object"==typeof(i=i||{})?this.each((function(){if(e.data(this,"plugin_"+t)){var o=e.data(this,"plugin_"+t);o.destroy.apply(o)}i.selector=a,e.data(this,"plugin_"+t,new c(this,i))})):"string"==typeof i&&"_"!==i[0]&&"init"!==i?this.each((function(){var a=e.data(this,"plugin_"+t);a instanceof c&&"function"==typeof a[i]&&a[i].apply(a,Array.prototype.slice.call(o,1))})):void 0}}));

// AOS
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AOS=t():e.AOS=t()}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="dist/",t(0)}([function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=n(1),a=(o(r),n(6)),u=o(a),c=n(7),f=o(c),s=n(8),d=o(s),l=n(9),p=o(l),m=n(10),b=o(m),v=n(11),y=o(v),g=n(14),h=o(g),w=[],k=!1,x=document.all&&!window.atob,j={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},O=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e&&(k=!0),k)return w=(0,y.default)(w,j),(0,b.default)(w,j.once),w},_=function(){w=(0,h.default)(),O()},S=function(){w.forEach(function(e,t){e.node.removeAttribute("data-aos"),e.node.removeAttribute("data-aos-easing"),e.node.removeAttribute("data-aos-duration"),e.node.removeAttribute("data-aos-delay")})},z=function(e){return e===!0||"mobile"===e&&p.default.mobile()||"phone"===e&&p.default.phone()||"tablet"===e&&p.default.tablet()||"function"==typeof e&&e()===!0},A=function(e){return j=i(j,e),w=(0,h.default)(),z(j.disable)||x?S():(document.querySelector("body").setAttribute("data-aos-easing",j.easing),document.querySelector("body").setAttribute("data-aos-duration",j.duration),document.querySelector("body").setAttribute("data-aos-delay",j.delay),"DOMContentLoaded"===j.startEvent&&["complete","interactive"].indexOf(document.readyState)>-1?O(!0):"load"===j.startEvent?window.addEventListener(j.startEvent,function(){O(!0)}):document.addEventListener(j.startEvent,function(){O(!0)}),window.addEventListener("resize",(0,f.default)(O,j.debounceDelay,!0)),window.addEventListener("orientationchange",(0,f.default)(O,j.debounceDelay,!0)),window.addEventListener("scroll",(0,u.default)(function(){(0,b.default)(w,j.once)},j.throttleDelay)),j.disableMutationObserver||(0,d.default)("[data-aos]",_),w)};e.exports={init:A,refresh:O,refreshHard:_}},function(e,t){},,,,,function(e,t){(function(t){"use strict";function n(e,t,n){function o(t){var n=b,o=v;return b=v=void 0,k=t,g=e.apply(o,n)}function r(e){return k=e,h=setTimeout(s,t),_?o(e):g}function a(e){var n=e-w,o=e-k,i=t-n;return S?j(i,y-o):i}function c(e){var n=e-w,o=e-k;return void 0===w||n>=t||n<0||S&&o>=y}function s(){var e=O();return c(e)?d(e):void(h=setTimeout(s,a(e)))}function d(e){return h=void 0,z&&b?o(e):(b=v=void 0,g)}function l(){void 0!==h&&clearTimeout(h),k=0,b=w=v=h=void 0}function p(){return void 0===h?g:d(O())}function m(){var e=O(),n=c(e);if(b=arguments,v=this,w=e,n){if(void 0===h)return r(w);if(S)return h=setTimeout(s,t),o(w)}return void 0===h&&(h=setTimeout(s,t)),g}var b,v,y,g,h,w,k=0,_=!1,S=!1,z=!0;if("function"!=typeof e)throw new TypeError(f);return t=u(t)||0,i(n)&&(_=!!n.leading,S="maxWait"in n,y=S?x(u(n.maxWait)||0,t):y,z="trailing"in n?!!n.trailing:z),m.cancel=l,m.flush=p,m}function o(e,t,o){var r=!0,a=!0;if("function"!=typeof e)throw new TypeError(f);return i(o)&&(r="leading"in o?!!o.leading:r,a="trailing"in o?!!o.trailing:a),n(e,t,{leading:r,maxWait:t,trailing:a})}function i(e){var t="undefined"==typeof e?"undefined":c(e);return!!e&&("object"==t||"function"==t)}function r(e){return!!e&&"object"==("undefined"==typeof e?"undefined":c(e))}function a(e){return"symbol"==("undefined"==typeof e?"undefined":c(e))||r(e)&&k.call(e)==d}function u(e){if("number"==typeof e)return e;if(a(e))return s;if(i(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=i(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(l,"");var n=m.test(e);return n||b.test(e)?v(e.slice(2),n?2:8):p.test(e)?s:+e}var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f="Expected a function",s=NaN,d="[object Symbol]",l=/^\s+|\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,m=/^0b[01]+$/i,b=/^0o[0-7]+$/i,v=parseInt,y="object"==("undefined"==typeof t?"undefined":c(t))&&t&&t.Object===Object&&t,g="object"==("undefined"==typeof self?"undefined":c(self))&&self&&self.Object===Object&&self,h=y||g||Function("return this")(),w=Object.prototype,k=w.toString,x=Math.max,j=Math.min,O=function(){return h.Date.now()};e.exports=o}).call(t,function(){return this}())},function(e,t){(function(t){"use strict";function n(e,t,n){function i(t){var n=b,o=v;return b=v=void 0,O=t,g=e.apply(o,n)}function r(e){return O=e,h=setTimeout(s,t),_?i(e):g}function u(e){var n=e-w,o=e-O,i=t-n;return S?x(i,y-o):i}function f(e){var n=e-w,o=e-O;return void 0===w||n>=t||n<0||S&&o>=y}function s(){var e=j();return f(e)?d(e):void(h=setTimeout(s,u(e)))}function d(e){return h=void 0,z&&b?i(e):(b=v=void 0,g)}function l(){void 0!==h&&clearTimeout(h),O=0,b=w=v=h=void 0}function p(){return void 0===h?g:d(j())}function m(){var e=j(),n=f(e);if(b=arguments,v=this,w=e,n){if(void 0===h)return r(w);if(S)return h=setTimeout(s,t),i(w)}return void 0===h&&(h=setTimeout(s,t)),g}var b,v,y,g,h,w,O=0,_=!1,S=!1,z=!0;if("function"!=typeof e)throw new TypeError(c);return t=a(t)||0,o(n)&&(_=!!n.leading,S="maxWait"in n,y=S?k(a(n.maxWait)||0,t):y,z="trailing"in n?!!n.trailing:z),m.cancel=l,m.flush=p,m}function o(e){var t="undefined"==typeof e?"undefined":u(e);return!!e&&("object"==t||"function"==t)}function i(e){return!!e&&"object"==("undefined"==typeof e?"undefined":u(e))}function r(e){return"symbol"==("undefined"==typeof e?"undefined":u(e))||i(e)&&w.call(e)==s}function a(e){if("number"==typeof e)return e;if(r(e))return f;if(o(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=o(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(d,"");var n=p.test(e);return n||m.test(e)?b(e.slice(2),n?2:8):l.test(e)?f:+e}var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c="Expected a function",f=NaN,s="[object Symbol]",d=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,p=/^0b[01]+$/i,m=/^0o[0-7]+$/i,b=parseInt,v="object"==("undefined"==typeof t?"undefined":u(t))&&t&&t.Object===Object&&t,y="object"==("undefined"==typeof self?"undefined":u(self))&&self&&self.Object===Object&&self,g=v||y||Function("return this")(),h=Object.prototype,w=h.toString,k=Math.max,x=Math.min,j=function(){return g.Date.now()};e.exports=n}).call(t,function(){return this}())},function(e,t){"use strict";function n(e,t){var n=new r(o);a=t,n.observe(i.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}function o(e){e&&e.forEach(function(e){var t=Array.prototype.slice.call(e.addedNodes),n=Array.prototype.slice.call(e.removedNodes),o=t.concat(n).filter(function(e){return e.hasAttribute&&e.hasAttribute("data-aos")}).length;o&&a()})}Object.defineProperty(t,"__esModule",{value:!0});var i=window.document,r=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,a=function(){};t.default=n},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,a=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,u=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,c=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,f=function(){function e(){n(this,e)}return i(e,[{key:"phone",value:function(){var e=o();return!(!r.test(e)&&!a.test(e.substr(0,4)))}},{key:"mobile",value:function(){var e=o();return!(!u.test(e)&&!c.test(e.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),e}();t.default=new f},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t,n){var o=e.node.getAttribute("data-aos-once");t>e.position?e.node.classList.add("aos-animate"):"undefined"!=typeof o&&("false"===o||!n&&"true"!==o)&&e.node.classList.remove("aos-animate")},o=function(e,t){var o=window.pageYOffset,i=window.innerHeight;e.forEach(function(e,r){n(e,i+o,t)})};t.default=o},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(12),r=o(i),a=function(e,t){return e.forEach(function(e,n){e.node.classList.add("aos-init"),e.position=(0,r.default)(e.node,t.offset)}),e};t.default=a},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(13),r=o(i),a=function(e,t){var n=0,o=0,i=window.innerHeight,a={offset:e.getAttribute("data-aos-offset"),anchor:e.getAttribute("data-aos-anchor"),anchorPlacement:e.getAttribute("data-aos-anchor-placement")};switch(a.offset&&!isNaN(a.offset)&&(o=parseInt(a.offset)),a.anchor&&document.querySelectorAll(a.anchor)&&(e=document.querySelectorAll(a.anchor)[0]),n=(0,r.default)(e).top,a.anchorPlacement){case"top-bottom":break;case"center-bottom":n+=e.offsetHeight/2;break;case"bottom-bottom":n+=e.offsetHeight;break;case"top-center":n+=i/2;break;case"bottom-center":n+=i/2+e.offsetHeight;break;case"center-center":n+=i/2+e.offsetHeight/2;break;case"top-top":n+=i;break;case"bottom-top":n+=e.offsetHeight+i;break;case"center-top":n+=e.offsetHeight/2+i}return a.anchorPlacement||a.offset||isNaN(t)||(o=t),n+o};t.default=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){for(var t=0,n=0;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft-("BODY"!=e.tagName?e.scrollLeft:0),n+=e.offsetTop-("BODY"!=e.tagName?e.scrollTop:0),e=e.offsetParent;return{top:n,left:t}};t.default=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e=e||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(e,function(e){return{node:e}})};t.default=n}])});

//Galeria
;window.Modernizr=function(a,b,c){function x(a){j.cssText=a}function y(a,b){return x(prefixes.join(a+";")+(b||""))}function z(a,b){return typeof a===b}function A(a,b){return!!~(""+a).indexOf(b)}function B(a,b){for(var d in a){var e=a[d];if(!A(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function C(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:z(f,"function")?f.bind(d||b):f}return!1}function D(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+n.join(d+" ")+d).split(" ");return z(b,"string")||z(b,"undefined")?B(e,b):(e=(a+" "+o.join(d+" ")+d).split(" "),C(e,b,c))}var d="2.6.2",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k,l={}.toString,m="Webkit Moz O ms",n=m.split(" "),o=m.toLowerCase().split(" "),p={},q={},r={},s=[],t=s.slice,u,v={}.hasOwnProperty,w;!z(v,"undefined")&&!z(v.call,"undefined")?w=function(a,b){return v.call(a,b)}:w=function(a,b){return b in a&&z(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=t.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(t.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(t.call(arguments)))};return e}),p.csstransitions=function(){return D("transition")};for(var E in p)w(p,E)&&(u=E.toLowerCase(),e[u]=p[E](),s.push((e[u]?"":"no-")+u));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)w(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},x(""),i=k=null,function(a,b){function k(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function l(){var a=r.elements;return typeof a=="string"?a.split(" "):a}function m(a){var b=i[a[g]];return b||(b={},h++,a[g]=h,i[h]=b),b}function n(a,c,f){c||(c=b);if(j)return c.createElement(a);f||(f=m(c));var g;return f.cache[a]?g=f.cache[a].cloneNode():e.test(a)?g=(f.cache[a]=f.createElem(a)).cloneNode():g=f.createElem(a),g.canHaveChildren&&!d.test(a)?f.frag.appendChild(g):g}function o(a,c){a||(a=b);if(j)return a.createDocumentFragment();c=c||m(a);var d=c.frag.cloneNode(),e=0,f=l(),g=f.length;for(;e<g;e++)d.createElement(f[e]);return d}function p(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return r.shivMethods?n(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+l().join().replace(/\w+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(r,b.frag)}function q(a){a||(a=b);var c=m(a);return r.shivCSS&&!f&&!c.hasCSS&&(c.hasCSS=!!k(a,"article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}")),j||p(a,c),a}var c=a.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,e=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,f,g="_html5shiv",h=0,i={},j;(function(){try{var a=b.createElement("a");a.innerHTML="<xyz></xyz>",f="hidden"in a,j=a.childNodes.length==1||function(){b.createElement("a");var a=b.createDocumentFragment();return typeof a.cloneNode=="undefined"||typeof a.createDocumentFragment=="undefined"||typeof a.createElement=="undefined"}()}catch(c){f=!0,j=!0}})();var r={elements:c.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",shivCSS:c.shivCSS!==!1,supportsUnknownElements:j,shivMethods:c.shivMethods!==!1,type:"default",shivDocument:q,createElement:n,createDocumentFragment:o};a.html5=r,q(b)}(this,b),e._version=d,e._domPrefixes=o,e._cssomPrefixes=n,e.testProp=function(a){return B([a])},e.testAllProps=D,g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+s.join(" "):""),e}(this,this.document),function(a,b,c){function d(a){return"[object Function]"==o.call(a)}function e(a){return"string"==typeof a}function f(){}function g(a){return!a||"loaded"==a||"complete"==a||"uninitialized"==a}function h(){var a=p.shift();q=1,a?a.t?m(function(){("c"==a.t?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&&g(l.readyState)&&(u.r=o=1,!q&&h(),l.onload=l.onreadystatechange=null,b)){"img"!=a&&m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&&y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a),o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};1===y[c]&&(r=1,y[c]=[]),"object"==a?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),"img"!=a&&(r||2===y[c]?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i("c"==b?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),1==p.length&&h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&&"[object Opera]"==o.call(a.opera),l=!!b.attachEvent&&!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return"[object Array]"==o.call(a)},x=[],y={},z={timeout:function(a,b){return b.length&&(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f<d;f++)g=a[f].split("="),(e=z[g.shift()])&&(c=e(c,g));for(f=0;f<b;f++)c=x[f](c);return c}function g(a,e,f,g,h){var i=b(a),j=i.autoCallback;i.url.split(".").pop().split("?").shift(),i.bypass||(e&&(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]),i.instead?i.instead(a,e,f,g,h):(y[i.url]?i.noexec=!0:y[i.url]=1,f.load(i.url,i.forceCSS||!i.forceJS&&"css"==i.url.split(".").pop().split("?").shift()?"c":c,i.noexec,i.attrs,i.timeout),(d(e)||d(j))&&f.load(function(){k(),e&&e(i.origUrl,h,g),j&&j(i.origUrl,h,g),y[i.url]=2})))}function h(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&&b++;return b}(),a)a.hasOwnProperty(n)&&(!c&&!--m&&(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&&a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&&l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&&c(i)}var i,j,l=this.yepnope.loader;if(e(a))g(a,0,l,0);else if(w(a))for(i=0;i<a.length;i++)j=a[i],e(j)?g(j,0,l,0):w(j)?B(j):Object(j)===j&&h(j,l);else Object(a)===a&&h(a,l)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,null==b.readyState&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&&g(k.readyState)&&(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};

// Hover Thumbs
(function(c,b,d){c.HoverDir=function(e,f){this.$el=c(f);this._init(e)};c.HoverDir.defaults={speed:300,easing:"ease",hoverDelay:0,inverse:false};c.HoverDir.prototype={_init:function(e){this.options=c.extend(true,{},c.HoverDir.defaults,e);this.transitionProp="all "+this.options.speed+"ms "+this.options.easing;this.support=Modernizr.csstransitions;this._loadEvents()},_loadEvents:function(){var e=this;this.$el.on("mouseenter.hoverdir, mouseleave.hoverdir",function(i){var g=c(this),f=g.find("div"),j=e._getDir(g,{x:i.pageX,y:i.pageY}),h=e._getStyle(j);if(i.type==="mouseenter"){f.hide().css(h.from);clearTimeout(e.tmhover);e.tmhover=setTimeout(function(){f.show(0,function(){var k=c(this);if(e.support){k.css("transition",e.transitionProp)}e._applyAnimation(k,h.to,e.options.speed)})},e.options.hoverDelay)}else{if(e.support){f.css("transition",e.transitionProp)}clearTimeout(e.tmhover);e._applyAnimation(f,h.from,e.options.speed)}})},_getDir:function(g,k){var f=g.width(),i=g.height(),e=(k.x-g.offset().left-(f/2))*(f>i?(i/f):1),l=(k.y-g.offset().top-(i/2))*(i>f?(f/i):1),j=Math.round((((Math.atan2(l,e)*(180/Math.PI))+180)/90)+3)%4;return j},_getStyle:function(k){var g,l,i={left:"0px",top:"-100%"},e={left:"0px",top:"100%"},h={left:"-100%",top:"0px"},f={left:"100%",top:"0px"},m={top:"0px"},j={left:"0px"};switch(k){case 0:g=!this.options.inverse?i:e;l=m;break;case 1:g=!this.options.inverse?f:h;l=j;break;case 2:g=!this.options.inverse?e:i;l=m;break;case 3:g=!this.options.inverse?h:f;l=j;break}return{from:g,to:l}},_applyAnimation:function(f,e,g){c.fn.applyStyle=this.support?c.fn.css:c.fn.animate;f.stop().applyStyle(e,c.extend(true,[],{duration:g+"ms"}))},};var a=function(e){if(b.console){b.console.error(e)}};c.fn.hoverdir=function(g){var e=c.data(this,"hoverdir");if(typeof g==="string"){var f=Array.prototype.slice.call(arguments,1);this.each(function(){if(!e){a("cannot call methods on hoverdir prior to initialization; attempted to call method '"+g+"'");return}if(!c.isFunction(e[g])||g.charAt(0)==="_"){a("no such method '"+g+"' for hoverdir instance");return}e[g].apply(e,f)})}else{this.each(function(){if(e){e._init()}else{e=c.data(this,"hoverdir",new c.HoverDir(g,this))}})}return e}})(jQuery,window);(function(e){if(typeof define==="function"&&define.amd){define(["jquery"],e)}else{e(jQuery)}})(function(e){function n(e){return u.raw?e:encodeURIComponent(e)}function r(e){return u.raw?e:decodeURIComponent(e)}function i(e){return n(u.json?JSON.stringify(e):String(e))}function s(e){if(e.indexOf('"')===0){e=e.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\")}try{e=decodeURIComponent(e.replace(t," "));return u.json?JSON.parse(e):e}catch(n){}}function o(t,n){var r=u.raw?t:s(t);return e.isFunction(n)?n(r):r}var t=/\+/g;var u=e.cookie=function(t,s,a){if(s!==undefined&&!e.isFunction(s)){a=e.extend({},u.defaults,a);if(typeof a.expires==="number"){var f=a.expires,l=a.expires=new Date;l.setTime(+l+f*864e5)}return document.cookie=[n(t),"=",i(s),a.expires?"; expires="+a.expires.toUTCString():"",a.path?"; path="+a.path:"",a.domain?"; domain="+a.domain:"",a.secure?"; secure":""].join("")}var c=t?undefined:{};var h=document.cookie?document.cookie.split("; "):[];for(var p=0,d=h.length;p<d;p++){var v=h[p].split("=");var m=r(v.shift());var g=v.join("=");if(t&&t===m){c=o(g,s);break}if(!t&&(g=o(g))!==undefined){c[m]=g}}return c};u.defaults={};e.removeCookie=function(t,n){if(e.cookie(t)===undefined){return false}e.cookie(t,"",e.extend({},n,{expires:-1}));return!e.cookie(t)}});function getCookie(b){var c,a,e,d=document.cookie.split(";");for(c=0;c<d.length;c++){a=d[c].substr(0,d[c].indexOf("="));e=d[c].substr(d[c].indexOf("=")+1);a=a.replace(/^\s+|\s+$/g,"");if(a==b){return unescape(e)}}};

// Dropdown select
(function ($) {
    'use strict';

    var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];

    var uriAttrs = [
        'background',
        'cite',
        'href',
        'itemtype',
        'longdesc',
        'poster',
        'src',
        'xlink:href'
    ];

    var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;

    var DefaultWhitelist = {
        // Global attributes allowed on any supplied element below.
        '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN],
        a: ['target', 'href', 'title', 'rel'],
        area: [],
        b: [],
        br: [],
        col: [],
        code: [],
        div: [],
        em: [],
        hr: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        i: [],
        img: ['src', 'alt', 'title', 'width', 'height'],
        li: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        u: [],
        ul: []
    };

    /**
     * A pattern that recognizes a commonly useful subset of URLs that are safe.
     *
     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
     */
    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;

    /**
     * A pattern that matches safe data URLs. Only matches image, video and audio types.
     *
     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
     */
    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

    var ParseableAttributes = ['title', 'placeholder']; // attributes to use as settings, can add others in the future

    function allowedAttribute (attr, allowedAttributeList) {
        var attrName = attr.nodeName.toLowerCase();

        if ($.inArray(attrName, allowedAttributeList) !== -1) {
            if ($.inArray(attrName, uriAttrs) !== -1) {
                return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
            }

            return true;
        }

        var regExp = $(allowedAttributeList).filter(function (index, value) {
            return value instanceof RegExp;
        });

        // Check if a regular expression validates the attribute.
        for (var i = 0, l = regExp.length; i < l; i++) {
            if (attrName.match(regExp[i])) {
                return true;
            }
        }

        return false;
    }

    function sanitizeHtml (unsafeElements, whiteList, sanitizeFn) {
        if (sanitizeFn && typeof sanitizeFn === 'function') {
            return sanitizeFn(unsafeElements);
        }

        var whitelistKeys = Object.keys(whiteList);

        for (var i = 0, len = unsafeElements.length; i < len; i++) {
            var elements = unsafeElements[i].querySelectorAll('*');

            for (var j = 0, len2 = elements.length; j < len2; j++) {
                var el = elements[j];
                var elName = el.nodeName.toLowerCase();

                if (whitelistKeys.indexOf(elName) === -1) {
                    el.parentNode.removeChild(el);

                    continue;
                }

                var attributeList = [].slice.call(el.attributes);
                var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);

                for (var k = 0, len3 = attributeList.length; k < len3; k++) {
                    var attr = attributeList[k];

                    if (!allowedAttribute(attr, whitelistedAttributes)) {
                        el.removeAttribute(attr.nodeName);
                    }
                }
            }
        }
    }

    function getAttributesObject ($select) {
        var attributesObject = {},
            attrVal;

        ParseableAttributes.forEach(function (item) {
            attrVal = $select.attr(item);
            if (attrVal) attributesObject[item] = attrVal;
        });

        // for backwards compatibility
        // (using title as placeholder is deprecated - remove in v2.0.0)
        if (!attributesObject.placeholder && attributesObject.title) {
            attributesObject.placeholder = attributesObject.title;
        }

        return attributesObject;
    }

    // shallow array comparison
    function isEqual (array1, array2) {
        return array1.length === array2.length && array1.every(function (element, index) {
            return element === array2[index];
        });
    };

    function getSelectedOptions () {
        var selectedOptions = this.selectpicker.main.data.filter(function (item) {
            if (item.selected) {
                if (this.options.hideDisabled && item.disabled) return false;
                return true;
            }

            return false;
        }, this);

        // ensure only 1 option is selected if multiple are set in the data source
        if (this.options.source.data && !this.multiple && selectedOptions.length > 1) {
            for (var i = 0; i < selectedOptions.length - 1; i++) {
                selectedOptions[i].selected = false;
            }

            selectedOptions = [ selectedOptions[selectedOptions.length - 1] ];
        }

        return selectedOptions;
    }

    // much faster than $.val()
    function getSelectValues (selectedOptions) {
        var value = [],
            options = selectedOptions || getSelectedOptions.call(this),
            opt;

        for (var i = 0, len = options.length; i < len; i++) {
            opt = options[i];

            if (!opt.disabled) {
                value.push(opt.value === undefined ? opt.text : opt.value);
            }
        }

        if (!this.multiple) {
            return !value.length ? null : value[0];
        }

        return value;
    }

    // set data-selected on select element if the value has been programmatically selected
    // prior to initialization of bootstrap-select
    // * consider removing or replacing an alternative method *
    var valHooks = {
        useDefault: false,
        _set: $.valHooks.select.set
    };

    $.valHooks.select.set = function (elem, value) {
        if (value && !valHooks.useDefault) $(elem).data('selected', true);

        return valHooks._set.apply(this, arguments);
    };

    var changedArguments = null;

    $.fn.triggerNative = function (eventName) {
        const el = this[0];
        const event = new Event(eventName, { bubbles: true });
        el.dispatchEvent(event);
    };

    function stringSearch (li, searchString, method, normalize) {
        var stringTypes = [
                'display',
                'subtext',
                'tokens'
            ],
            searchSuccess = false;

        for (var i = 0; i < stringTypes.length; i++) {
            var stringType = stringTypes[i],
                string = li[stringType];

            if (string) {
                string = string.toString();

                // Strip HTML tags. This isn't perfect, but it's much faster than any other method
                if (stringType === 'display') {
                    string = string.replace(/<[^>]+>/g, '');
                }

                if (normalize) string = normalizeToBase(string);
                string = string.toUpperCase();

                if (typeof method === 'function') {
                    searchSuccess = method(string, searchString);
                } else if (method === 'contains') {
                    searchSuccess = string.indexOf(searchString) >= 0;
                } else {
                    searchSuccess = string.startsWith(searchString);
                }

                if (searchSuccess) break;
            }
        }

        return searchSuccess;
    }

    function toInteger (value) {
        return parseInt(value, 10) || 0;
    }

    // Borrowed from Lodash (_.deburr)
    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
        '\xc7': 'C',  '\xe7': 'c',
        '\xd0': 'D',  '\xf0': 'd',
        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
        '\xd1': 'N',  '\xf1': 'n',
        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
        '\xc6': 'Ae', '\xe6': 'ae',
        '\xde': 'Th', '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
        '\u0134': 'J',  '\u0135': 'j',
        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
        '\u0174': 'W',  '\u0175': 'w',
        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
        '\u0132': 'IJ', '\u0133': 'ij',
        '\u0152': 'Oe', '\u0153': 'oe',
        '\u0149': "'n", '\u017f': 's'
    };

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboMarksExtendedRange = '\\u1ab0-\\u1aff',
        rsComboMarksSupplementRange = '\\u1dc0-\\u1dff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange;

    /** Used to compose unicode capture groups. */
    var rsCombo = '[' + rsComboRange + ']';

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    function deburrLetter (key) {
        return deburredLetters[key];
    };

    function normalizeToBase (string) {
        string = string.toString();
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    // List of HTML entities for escaping.
    var escapeMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;'
    };

    // Functions for escaping and unescaping strings to/from HTML interpolation.
    var createEscaper = function (map) {
        var escaper = function (match) {
            return map[match];
        };
        // Regexes for identifying a key that needs to be escaped.
        var source = '(?:' + Object.keys(map).join('|') + ')';
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, 'g');
        return function (string) {
            string = string == null ? '' : '' + string;
            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
    };

    var htmlEscape = createEscaper(escapeMap);

    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */

    var keyCodeMap = {
        32: ' ',
        48: '0',
        49: '1',
        50: '2',
        51: '3',
        52: '4',
        53: '5',
        54: '6',
        55: '7',
        56: '8',
        57: '9',
        59: ';',
        65: 'A',
        66: 'B',
        67: 'C',
        68: 'D',
        69: 'E',
        70: 'F',
        71: 'G',
        72: 'H',
        73: 'I',
        74: 'J',
        75: 'K',
        76: 'L',
        77: 'M',
        78: 'N',
        79: 'O',
        80: 'P',
        81: 'Q',
        82: 'R',
        83: 'S',
        84: 'T',
        85: 'U',
        86: 'V',
        87: 'W',
        88: 'X',
        89: 'Y',
        90: 'Z',
        96: '0',
        97: '1',
        98: '2',
        99: '3',
        100: '4',
        101: '5',
        102: '6',
        103: '7',
        104: '8',
        105: '9'
    };

    var keyCodes = {
        ESCAPE: 27, // KeyboardEvent.which value for Escape (Esc) key
        ENTER: 13, // KeyboardEvent.which value for Enter key
        SPACE: 32, // KeyboardEvent.which value for space key
        TAB: 9, // KeyboardEvent.which value for tab key
        ARROW_UP: 38, // KeyboardEvent.which value for up arrow key
        ARROW_DOWN: 40 // KeyboardEvent.which value for down arrow key
    };

    // eslint-disable-next-line no-undef
    var Dropdown = window.Dropdown || bootstrap.Dropdown;

    function getVersion () {
        var version;

        try {
            version = $.fn.dropdown.Constructor.VERSION;
        } catch (err) {
            version = Dropdown.VERSION;
        }

        return version;
    }

    var version = {
        success: false,
        major: '3'
    };

    try {
        version.full = (getVersion() || '').split(' ')[0].split('.');
        version.major = version.full[0];
        version.success = true;
    } catch (err) {
        // do nothing
    }

    var selectId = 0;

    var EVENT_KEY = '.bs.select';

    var classNames = {
        DISABLED: 'disabled',
        DIVIDER: 'divider',
        SHOW: 'open',
        DROPUP: 'dropup',
        MENU: 'dropdown-menu',
        MENURIGHT: 'dropdown-menu-right',
        MENULEFT: 'dropdown-menu-left',
        // to-do: replace with more advanced template/customization options
        BUTTONCLASS: 'btn-default',
        POPOVERHEADER: 'popover-title',
        ICONBASE: 'glyphicon',
        TICKICON: 'glyphicon-ok'
    };

    var Selector = {
        MENU: '.' + classNames.MENU,
        DATA_TOGGLE: 'data-toggle="dropdown"'
    };

    var elementTemplates = {
        div: document.createElement('div'),
        span: document.createElement('span'),
        i: document.createElement('i'),
        subtext: document.createElement('small'),
        a: document.createElement('a'),
        li: document.createElement('li'),
        whitespace: document.createTextNode('\u00A0'),
        fragment: document.createDocumentFragment(),
        option: document.createElement('option')
    };

    elementTemplates.selectedOption = elementTemplates.option.cloneNode(false);
    elementTemplates.selectedOption.setAttribute('selected', true);

    elementTemplates.noResults = elementTemplates.li.cloneNode(false);
    elementTemplates.noResults.className = 'no-results';

    elementTemplates.a.setAttribute('role', 'option');
    elementTemplates.a.className = 'dropdown-item';

    elementTemplates.subtext.className = 'text-muted';

    elementTemplates.text = elementTemplates.span.cloneNode(false);
    elementTemplates.text.className = 'text';

    elementTemplates.checkMark = elementTemplates.span.cloneNode(false);

    var REGEXP_ARROW = new RegExp(keyCodes.ARROW_UP + '|' + keyCodes.ARROW_DOWN);
    var REGEXP_TAB_OR_ESCAPE = new RegExp('^' + keyCodes.TAB + '$|' + keyCodes.ESCAPE);

    var generateOption = {
        li: function (content, classes, optgroup) {
            var li = elementTemplates.li.cloneNode(false);

            if (content) {
                if (content.nodeType === 1 || content.nodeType === 11) {
                    li.appendChild(content);
                } else {
                    li.innerHTML = content;
                }
            }

            if (typeof classes !== 'undefined' && classes !== '') li.className = classes;
            if (typeof optgroup !== 'undefined' && optgroup !== null) li.classList.add('optgroup-' + optgroup);

            return li;
        },

        a: function (text, classes, inline) {
            var a = elementTemplates.a.cloneNode(true);

            if (text) {
                if (text.nodeType === 11) {
                    a.appendChild(text);
                } else {
                    a.insertAdjacentHTML('beforeend', text);
                }
            }

            if (typeof classes !== 'undefined' && classes !== '') a.classList.add.apply(a.classList, classes.split(/\s+/));
            if (inline) a.setAttribute('style', inline);

            return a;
        },

        text: function (options, useFragment) {
            var textElement = elementTemplates.text.cloneNode(false),
                subtextElement,
                iconElement;

            if (options.content) {
                textElement.innerHTML = options.content;
            } else {
                textElement.textContent = options.text;

                if (options.icon) {
                    var whitespace = elementTemplates.whitespace.cloneNode(false);

                    // need to use <i> for icons in the button to prevent a breaking change
                    // note: switch to span in next major release
                    iconElement = (useFragment === true ? elementTemplates.i : elementTemplates.span).cloneNode(false);
                    iconElement.className = this.options.iconBase + ' ' + options.icon;

                    elementTemplates.fragment.appendChild(iconElement);
                    elementTemplates.fragment.appendChild(whitespace);
                }

                if (options.subtext) {
                    subtextElement = elementTemplates.subtext.cloneNode(false);
                    subtextElement.textContent = options.subtext;
                    textElement.appendChild(subtextElement);
                }
            }

            if (useFragment === true) {
                while (textElement.childNodes.length > 0) {
                    elementTemplates.fragment.appendChild(textElement.childNodes[0]);
                }
            } else {
                elementTemplates.fragment.appendChild(textElement);
            }

            return elementTemplates.fragment;
        },

        label: function (options) {
            var textElement = elementTemplates.text.cloneNode(false),
                subtextElement,
                iconElement;

            textElement.innerHTML = options.display;

            if (options.icon) {
                var whitespace = elementTemplates.whitespace.cloneNode(false);

                iconElement = elementTemplates.span.cloneNode(false);
                iconElement.className = this.options.iconBase + ' ' + options.icon;

                elementTemplates.fragment.appendChild(iconElement);
                elementTemplates.fragment.appendChild(whitespace);
            }

            if (options.subtext) {
                subtextElement = elementTemplates.subtext.cloneNode(false);
                subtextElement.textContent = options.subtext;
                textElement.appendChild(subtextElement);
            }

            elementTemplates.fragment.appendChild(textElement);

            return elementTemplates.fragment;
        }
    };

    var getOptionData = {
        fromOption: function (option, type) {
            var value;

            switch (type) {
                case 'divider':
                    value = option.getAttribute('data-divider') === 'true';
                    break;

                case 'text':
                    value = option.textContent;
                    break;

                case 'label':
                    value = option.label;
                    break;

                case 'style':
                    value = option.style.cssText;
                    break;

                case 'content':
                case 'tokens':
                case 'subtext':
                case 'icon':
                    value = option.getAttribute('data-' + type);
                    break;
            }

            return value;
        },
        fromDataSource: function (option, type) {
            var value;

            switch (type) {
                case 'text':
                case 'label':
                    value = option.text || option.value || '';
                    break;

                case 'divider':
                case 'style':
                case 'content':
                case 'tokens':
                case 'subtext':
                case 'icon':
                    value = option[type];
                    break;
            }

            return value;
        }
    };

    function showNoResults (searchMatch, searchValue) {
        if (!searchMatch.length) {
            elementTemplates.noResults.innerHTML = this.options.noneResultsText.replace('{0}', '"' + htmlEscape(searchValue) + '"');
            this.$menuInner[0].firstChild.appendChild(elementTemplates.noResults);
        }
    }

    function filterHidden (item) {
        return !(item.hidden || this.options.hideDisabled && item.disabled);
    }

    var Selectpicker = function (element, options) {
        var that = this;

        // bootstrap-select has been initialized - revert valHooks.select.set back to its original function
        if (!valHooks.useDefault) {
            $.valHooks.select.set = valHooks._set;
            valHooks.useDefault = true;
        }

        this.$element = $(element);
        this.$newElement = null;
        this.$button = null;
        this.$menu = null;
        this.options = options;
        this.selectpicker = {
            main: {
                optionQueue: elementTemplates.fragment.cloneNode(false)
            },
            search: {},
            current: {}, // current changes if a search is in progress
            view: {},
            isSearching: false,
            keydown: {
                keyHistory: '',
                resetKeyHistory: {
                    start: function () {
                        return setTimeout(function () {
                            that.selectpicker.keydown.keyHistory = '';
                        }, 800);
                    }
                }
            }
        };

        this.sizeInfo = {};

        // Format window padding
        var winPad = this.options.windowPadding;
        if (typeof winPad === 'number') {
            this.options.windowPadding = [winPad, winPad, winPad, winPad];
        }

        // Expose public methods
        this.val = Selectpicker.prototype.val;
        this.render = Selectpicker.prototype.render;
        this.refresh = Selectpicker.prototype.refresh;
        this.setStyle = Selectpicker.prototype.setStyle;
        this.selectAll = Selectpicker.prototype.selectAll;
        this.deselectAll = Selectpicker.prototype.deselectAll;
        this.destroy = Selectpicker.prototype.destroy;
        this.remove = Selectpicker.prototype.remove;
        this.show = Selectpicker.prototype.show;
        this.hide = Selectpicker.prototype.hide;

        this.init();
    };

    Selectpicker.VERSION = '1.14.0-beta2';

    // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.
    Selectpicker.DEFAULTS = {
        noneSelectedText: 'Nothing selected',
        noneResultsText: 'No results matched {0}',
        countSelectedText: function (numSelected, numTotal) {
            return (numSelected == 1) ? '{0} item selected' : '{0} items selected';
        },
        maxOptionsText: function (numAll, numGroup) {
            return [
                (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
                (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
            ];
        },
        selectAllText: 'Select All',
        deselectAllText: 'Deselect All',
        source: {},
        chunkSize: 40,
        doneButton: false,
        doneButtonText: 'Close',
        multipleSeparator: ', ',
        styleBase: 'btn',
        style: classNames.BUTTONCLASS,
        size: 'auto',
        title: null,
        placeholder: null,
        allowClear: false,
        selectedTextFormat: 'values',
        width: false,
        container: false,
        hideDisabled: false,
        showSubtext: false,
        showIcon: true,
        showContent: true,
        dropupAuto: true,
        header: false,
        liveSearch: false,
        liveSearchPlaceholder: null,
        liveSearchNormalize: false,
        liveSearchStyle: 'contains',
        actionsBox: false,
        iconBase: classNames.ICONBASE,
        tickIcon: classNames.TICKICON,
        showTick: false,
        template: {
            caret: '<span class="caret"></span>'
        },
        maxOptions: false,
        mobile: false,
        selectOnTab: false,
        dropdownAlignRight: false,
        windowPadding: 0,
        virtualScroll: 600,
        display: false,
        sanitize: true,
        sanitizeFn: null,
        whiteList: DefaultWhitelist
    };

    Selectpicker.prototype = {

        constructor: Selectpicker,

        init: function () {
            var that = this,
                id = this.$element.attr('id'),
                element = this.$element[0],
                form = element.form;

            selectId++;
            this.selectId = 'bs-select-' + selectId;

            element.classList.add('bs-select-hidden');

            this.multiple = this.$element.prop('multiple');
            this.autofocus = this.$element.prop('autofocus');

            if (element.classList.contains('show-tick')) {
                this.options.showTick = true;
            }

            this.$newElement = this.createDropdown();

            this.$element
                .after(this.$newElement)
                .prependTo(this.$newElement);

            // ensure select is associated with form element if it got unlinked after moving it inside newElement
            if (form && element.form === null) {
                if (!form.id) form.id = 'form-' + this.selectId;
                element.setAttribute('form', form.id);
            }

            this.$button = this.$newElement.children('button');
            if (this.options.allowClear) this.$clearButton = this.$button.children('.bs-select-clear-selected');
            this.$menu = this.$newElement.children(Selector.MENU);
            this.$menuInner = this.$menu.children('.inner');
            this.$searchbox = this.$menu.find('input');

            element.classList.remove('bs-select-hidden');

            this.fetchData(function () {
                that.render(true);
                that.buildList();

                requestAnimationFrame(function () {
                    that.$element.trigger('loaded' + EVENT_KEY);
                });
            });

            this.fetchData(function () {
                that.render(true);
                that.buildList();

                requestAnimationFrame(function () {
                    that.$element.trigger('loaded' + EVENT_KEY);
                });
            });

            if (this.options.dropdownAlignRight === true) this.$menu[0].classList.add(classNames.MENURIGHT);

            if (typeof id !== 'undefined') {
                this.$button.attr('data-id', id);
            }

            this.checkDisabled();
            this.clickListener();

            if (version.major > 4) this.dropdown = new Dropdown(this.$button[0]);

            if (this.options.liveSearch) {
                this.liveSearchListener();
                this.focusedParent = this.$searchbox[0];
            } else {
                this.focusedParent = this.$menuInner[0];
            }

            this.setStyle();
            this.setWidth();
            if (this.options.container) {
                this.selectPosition();
            } else {
                this.$element.on('hide' + EVENT_KEY, function () {
                    if (that.isVirtual()) {
                        // empty menu on close
                        var menuInner = that.$menuInner[0],
                            emptyMenu = menuInner.firstChild.cloneNode(false);

                        // replace the existing UL with an empty one - this is faster than $.empty() or innerHTML = ''
                        menuInner.replaceChild(emptyMenu, menuInner.firstChild);
                        menuInner.scrollTop = 0;
                    }
                });
            }
            this.$menu.data('this', this);
            this.$newElement.data('this', this);
            if (this.options.mobile) this.mobile();

            this.$newElement.on({
                'hide.bs.dropdown': function (e) {
                    that.$element.trigger('hide' + EVENT_KEY, e);
                },
                'hidden.bs.dropdown': function (e) {
                    that.$element.trigger('hidden' + EVENT_KEY, e);
                },
                'show.bs.dropdown': function (e) {
                    that.$element.trigger('show' + EVENT_KEY, e);
                },
                'shown.bs.dropdown': function (e) {
                    that.$element.trigger('shown' + EVENT_KEY, e);
                }
            });

            if (element.hasAttribute('required')) {
                this.$element.on('invalid' + EVENT_KEY, function () {
                    that.$button[0].classList.add('bs-invalid');

                    that.$element
                        .on('shown' + EVENT_KEY + '.invalid', function () {
                            that.$element
                                .val(that.$element.val()) // set the value to hide the validation message in Chrome when menu is opened
                                .off('shown' + EVENT_KEY + '.invalid');
                        })
                        .on('rendered' + EVENT_KEY, function () {
                            // if select is no longer invalid, remove the bs-invalid class
                            if (this.validity.valid) that.$button[0].classList.remove('bs-invalid');
                            that.$element.off('rendered' + EVENT_KEY);
                        });

                    that.$button.on('blur' + EVENT_KEY, function () {
                        that.$element.trigger('focus').trigger('blur');
                        that.$button.off('blur' + EVENT_KEY);
                    });
                });
            }

            if (form) {
                $(form).on('reset' + EVENT_KEY, function () {
                    requestAnimationFrame(function () {
                        that.render();
                    });
                });
            }
        },

        createDropdown: function () {
            // Options
            // If we are multiple or showTick option is set, then add the show-tick class
            var showTick = (this.multiple || this.options.showTick) ? ' show-tick' : '',
                multiselectable = this.multiple ? ' aria-multiselectable="true"' : '',
                inputGroup = '',
                autofocus = this.autofocus ? ' autofocus' : '';

            if (version.major < 4 && this.$element.parent().hasClass('input-group')) {
                inputGroup = ' input-group-btn';
            }

            // Elements
            var drop,
                header = '',
                searchbox = '',
                actionsbox = '',
                donebutton = '',
                clearButton = '';

            if (this.options.header) {
                header =
                    '<div class="' + classNames.POPOVERHEADER + '">' +
                    '<button type="button" class="close" aria-hidden="true">&times;</button>' +
                    this.options.header +
                    '</div>';
            }

            if (this.options.liveSearch) {
                searchbox =
                    '<div class="bs-searchbox">' +
                    '<input type="search" class="form-control" autocomplete="off"' +
                    (
                        this.options.liveSearchPlaceholder === null ? ''
                            :
                            ' placeholder="' + htmlEscape(this.options.liveSearchPlaceholder) + '"'
                    ) +
                    ' role="combobox" aria-label="Search" aria-controls="' + this.selectId + '" aria-autocomplete="list">' +
                    '</div>';
            }

            if (this.multiple && this.options.actionsBox) {
                actionsbox =
                    '<div class="bs-actionsbox">' +
                    '<div class="btn-group btn-group-sm">' +
                    '<button type="button" class="actions-btn bs-select-all btn ' + classNames.BUTTONCLASS + '">' +
                    this.options.selectAllText +
                    '</button>' +
                    '<button type="button" class="actions-btn bs-deselect-all btn ' + classNames.BUTTONCLASS + '">' +
                    this.options.deselectAllText +
                    '</button>' +
                    '</div>' +
                    '</div>';
            }

            if (this.multiple && this.options.doneButton) {
                donebutton =
                    '<div class="bs-donebutton">' +
                    '<div class="btn-group">' +
                    '<button type="button" class="btn btn-sm ' + classNames.BUTTONCLASS + '">' +
                    this.options.doneButtonText +
                    '</button>' +
                    '</div>' +
                    '</div>';
            }

            if (this.options.allowClear) {
                clearButton = '<span class="close bs-select-clear-selected" title="' + this.options.deselectAllText + '"><span>&times;</span>';
            }

            drop =
                '<div class="dropdown bootstrap-select' + showTick + inputGroup + '">' +
                '<button type="button" tabindex="-1" class="' +
                this.options.styleBase +
                ' dropdown-toggle" ' +
                (this.options.display === 'static' ? 'data-display="static"' : '') +
                Selector.DATA_TOGGLE +
                autofocus +
                ' role="combobox" aria-owns="' +
                this.selectId +
                '" aria-haspopup="listbox" aria-expanded="false">' +
                '<div class="filter-option">' +
                '<div class="filter-option-inner">' +
                '<div class="filter-option-inner-inner">&nbsp;</div>' +
                '</div> ' +
                '</div>' +
                clearButton +
                '</span>' +
                (
                    version.major >= '4' ? ''
                        :
                        '<span class="bs-caret">' +
                        this.options.template.caret +
                        '</span>'
                ) +
                '</button>' +
                '<div class="' + classNames.MENU + ' ' + (version.major >= '4' ? '' : classNames.SHOW) + '">' +
                header +
                searchbox +
                actionsbox +
                '<div class="inner ' + classNames.SHOW + '" role="listbox" id="' + this.selectId + '" tabindex="-1" ' + multiselectable + '>' +
                '<ul class="' + classNames.MENU + ' inner ' + (version.major >= '4' ? classNames.SHOW : '') + '" role="presentation">' +
                '</ul>' +
                '</div>' +
                donebutton +
                '</div>' +
                '</div>';

            return $(drop);
        },

        setPositionData: function () {
            this.selectpicker.view.canHighlight = [];
            this.selectpicker.view.size = 0;
            this.selectpicker.view.firstHighlightIndex = false;

            for (var i = 0; i < this.selectpicker.current.data.length; i++) {
                var li = this.selectpicker.current.data[i],
                    canHighlight = true;

                if (li.type === 'divider') {
                    canHighlight = false;
                    li.height = this.sizeInfo.dividerHeight;
                } else if (li.type === 'optgroup-label') {
                    canHighlight = false;
                    li.height = this.sizeInfo.dropdownHeaderHeight;
                } else {
                    li.height = this.sizeInfo.liHeight;
                }

                if (li.disabled) canHighlight = false;

                this.selectpicker.view.canHighlight.push(canHighlight);

                if (canHighlight) {
                    this.selectpicker.view.size++;
                    li.posinset = this.selectpicker.view.size;
                    if (this.selectpicker.view.firstHighlightIndex === false) this.selectpicker.view.firstHighlightIndex = i;
                }

                li.position = (i === 0 ? 0 : this.selectpicker.current.data[i - 1].position) + li.height;
            }
        },

        isVirtual: function () {
            return (this.options.virtualScroll !== false) && (this.selectpicker.main.data.length >= this.options.virtualScroll) || this.options.virtualScroll === true;
        },

        createView: function (isSearching, setSize, refresh) {
            var that = this,
                scrollTop = 0,
                active = [],
                selected,
                prevActive;

            this.selectpicker.isSearching = isSearching;
            this.selectpicker.current = isSearching ? this.selectpicker.search : this.selectpicker.main;

            this.setPositionData();

            if (setSize) {
                if (refresh) {
                    scrollTop = this.$menuInner[0].scrollTop;
                } else if (!that.multiple) {
                    var element = that.$element[0],
                        selectedIndex = (element.options[element.selectedIndex] || {}).liIndex;

                    if (typeof selectedIndex === 'number' && that.options.size !== false) {
                        var selectedData = that.selectpicker.main.data[selectedIndex],
                            position = selectedData && selectedData.position;

                        if (position) {
                            scrollTop = position - ((that.sizeInfo.menuInnerHeight + that.sizeInfo.liHeight) / 2);
                        }
                    }
                }
            }

            scroll(scrollTop, true);

            this.$menuInner.off('scroll.createView').on('scroll.createView', function (e, updateValue) {
                if (!that.noScroll) scroll(this.scrollTop, updateValue);
                that.noScroll = false;
            });

            function scroll (scrollTop, init) {
                var size = that.selectpicker.current.data.length,
                    chunks = [],
                    chunkSize,
                    chunkCount,
                    firstChunk,
                    lastChunk,
                    currentChunk,
                    prevPositions,
                    positionIsDifferent,
                    previousElements,
                    menuIsDifferent = true,
                    isVirtual = that.isVirtual();

                that.selectpicker.view.scrollTop = scrollTop;

                chunkSize = that.options.chunkSize; // number of options in a chunk
                chunkCount = Math.ceil(size / chunkSize) || 1; // number of chunks

                for (var i = 0; i < chunkCount; i++) {
                    var endOfChunk = (i + 1) * chunkSize;

                    if (i === chunkCount - 1) {
                        endOfChunk = size;
                    }

                    chunks[i] = [
                        (i) * chunkSize + (!i ? 0 : 1),
                        endOfChunk
                    ];

                    if (!size) break;

                    if (currentChunk === undefined && scrollTop - 1 <= that.selectpicker.current.data[endOfChunk - 1].position - that.sizeInfo.menuInnerHeight) {
                        currentChunk = i;
                    }
                }

                if (currentChunk === undefined) currentChunk = 0;

                prevPositions = [that.selectpicker.view.position0, that.selectpicker.view.position1];

                // always display previous, current, and next chunks
                firstChunk = Math.max(0, currentChunk - 1);
                lastChunk = Math.min(chunkCount - 1, currentChunk + 1);

                that.selectpicker.view.position0 = isVirtual === false ? 0 : (Math.max(0, chunks[firstChunk][0]) || 0);
                that.selectpicker.view.position1 = isVirtual === false ? size : (Math.min(size, chunks[lastChunk][1]) || 0);

                positionIsDifferent = prevPositions[0] !== that.selectpicker.view.position0 || prevPositions[1] !== that.selectpicker.view.position1;

                if (that.activeIndex !== undefined) {
                    prevActive = (that.selectpicker.main.data[that.prevActiveIndex] || {}).element;
                    active = (that.selectpicker.main.data[that.activeIndex] || {}).element;
                    selected = (that.selectpicker.main.data[that.selectedIndex] || {}).element;

                    if (init) {
                        if (that.activeIndex !== that.selectedIndex) {
                            that.defocusItem(active);
                        }
                        that.activeIndex = undefined;
                    }

                    if (that.activeIndex && that.activeIndex !== that.selectedIndex) {
                        that.defocusItem(selected);
                    }
                }

                if (that.prevActiveIndex !== undefined && that.prevActiveIndex !== that.activeIndex && that.prevActiveIndex !== that.selectedIndex) {
                    that.defocusItem(prevActive);
                }

                if (init || positionIsDifferent) {
                    previousElements = that.selectpicker.view.visibleElements ? that.selectpicker.view.visibleElements.slice() : [];

                    if (isVirtual === false) {
                        that.selectpicker.view.visibleElements = that.selectpicker.current.elements;
                    } else {
                        that.selectpicker.view.visibleElements = that.selectpicker.current.elements.slice(that.selectpicker.view.position0, that.selectpicker.view.position1);
                    }

                    that.setOptionStatus();

                    // if searching, check to make sure the list has actually been updated before updating DOM
                    // this prevents unnecessary repaints
                    if (isSearching || (isVirtual === false && init)) menuIsDifferent = !isEqual(previousElements, that.selectpicker.view.visibleElements);

                    // if virtual scroll is disabled and not searching,
                    // menu should never need to be updated more than once
                    if ((init || isVirtual === true) && menuIsDifferent) {
                        var menuInner = that.$menuInner[0],
                            menuFragment = document.createDocumentFragment(),
                            emptyMenu = menuInner.firstChild.cloneNode(false),
                            marginTop,
                            marginBottom,
                            elements = that.selectpicker.view.visibleElements,
                            toSanitize = [];

                        // replace the existing UL with an empty one - this is faster than $.empty()
                        menuInner.replaceChild(emptyMenu, menuInner.firstChild);

                        for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {
                            var element = elements[i],
                                elText,
                                elementData;

                            if (that.options.sanitize) {
                                elText = element.lastChild;

                                if (elText) {
                                    elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0];

                                    if (elementData && elementData.content && !elementData.sanitized) {
                                        toSanitize.push(elText);
                                        elementData.sanitized = true;
                                    }
                                }
                            }

                            menuFragment.appendChild(element);
                        }

                        if (that.options.sanitize && toSanitize.length) {
                            sanitizeHtml(toSanitize, that.options.whiteList, that.options.sanitizeFn);
                        }

                        if (isVirtual === true) {
                            marginTop = (that.selectpicker.view.position0 === 0 ? 0 : that.selectpicker.current.data[that.selectpicker.view.position0 - 1].position);
                            marginBottom = (that.selectpicker.view.position1 > size - 1 ? 0 : that.selectpicker.current.data[size - 1].position - that.selectpicker.current.data[that.selectpicker.view.position1 - 1].position);

                            menuInner.firstChild.style.marginTop = marginTop + 'px';
                            menuInner.firstChild.style.marginBottom = marginBottom + 'px';
                        } else {
                            menuInner.firstChild.style.marginTop = 0;
                            menuInner.firstChild.style.marginBottom = 0;
                        }

                        menuInner.firstChild.appendChild(menuFragment);

                        // if an option is encountered that is wider than the current menu width, update the menu width accordingly
                        // switch to ResizeObserver with increased browser support
                        if (isVirtual === true && that.sizeInfo.hasScrollBar) {
                            var menuInnerInnerWidth = menuInner.firstChild.offsetWidth;

                            if (init && menuInnerInnerWidth < that.sizeInfo.menuInnerInnerWidth && that.sizeInfo.totalMenuWidth > that.sizeInfo.selectWidth) {
                                menuInner.firstChild.style.minWidth = that.sizeInfo.menuInnerInnerWidth + 'px';
                            } else if (menuInnerInnerWidth > that.sizeInfo.menuInnerInnerWidth) {
                                // set to 0 to get actual width of menu
                                that.$menu[0].style.minWidth = 0;

                                var actualMenuWidth = menuInner.firstChild.offsetWidth;

                                if (actualMenuWidth > that.sizeInfo.menuInnerInnerWidth) {
                                    that.sizeInfo.menuInnerInnerWidth = actualMenuWidth;
                                    menuInner.firstChild.style.minWidth = that.sizeInfo.menuInnerInnerWidth + 'px';
                                }

                                // reset to default CSS styling
                                that.$menu[0].style.minWidth = '';
                            }
                        }
                    }

                    if ((!isSearching && that.options.source.load || isSearching && that.options.source.search) && currentChunk === chunkCount - 1) {
                        that.fetchData(function () {
                            that.render();
                            that.buildList(size, isSearching);
                            that.setPositionData();
                            scroll(scrollTop);
                        }, isSearching ? 'search' : 'load', currentChunk + 1, isSearching ? that.selectpicker.search.previousValue : undefined);
                    }
                }

                that.prevActiveIndex = that.activeIndex;

                if (!that.options.liveSearch) {
                    that.$menuInner.trigger('focus');
                } else if (isSearching && init) {
                    var index = 0,
                        newActive;

                    if (!that.selectpicker.view.canHighlight[index]) {
                        index = 1 + that.selectpicker.view.canHighlight.slice(1).indexOf(true);
                    }

                    newActive = that.selectpicker.view.visibleElements[index];

                    that.defocusItem(that.selectpicker.view.currentActive);

                    that.activeIndex = (that.selectpicker.current.data[index] || {}).index;

                    that.focusItem(newActive);
                }
            }

            $(window)
                .off('resize' + EVENT_KEY + '.' + this.selectId + '.createView')
                .on('resize' + EVENT_KEY + '.' + this.selectId + '.createView', function () {
                    var isActive = that.$newElement.hasClass(classNames.SHOW);

                    if (isActive) scroll(that.$menuInner[0].scrollTop);
                });
        },

        focusItem: function (li, liData, noStyle) {
            if (li) {
                liData = liData || this.selectpicker.main.data[this.activeIndex];
                var a = li.firstChild;

                if (a) {
                    a.setAttribute('aria-setsize', this.selectpicker.view.size);
                    a.setAttribute('aria-posinset', liData.posinset);

                    if (noStyle !== true) {
                        this.focusedParent.setAttribute('aria-activedescendant', a.id);
                        li.classList.add('active');
                        a.classList.add('active');
                    }
                }
            }
        },

        defocusItem: function (li) {
            if (li) {
                li.classList.remove('active');
                if (li.firstChild) li.firstChild.classList.remove('active');
            }
        },

        setPlaceholder: function () {
            var that = this,
                updateIndex = false;

            if ((this.options.placeholder || this.options.allowClear) && !this.multiple) {
                if (!this.selectpicker.view.titleOption) this.selectpicker.view.titleOption = document.createElement('option');

                // this option doesn't create a new <li> element, but does add a new option at the start,
                // so startIndex should increase to prevent having to check every option for the bs-title-option class
                updateIndex = true;

                var element = this.$element[0],
                    selectTitleOption = false,
                    titleNotAppended = !this.selectpicker.view.titleOption.parentNode,
                    selectedIndex = element.selectedIndex,
                    selectedOption = element.options[selectedIndex],
                    firstSelectable = element.querySelector('select > *:not(:disabled)'),
                    firstSelectableIndex = firstSelectable ? firstSelectable.index : 0,
                    navigation = window.performance && window.performance.getEntriesByType('navigation'),
                    // Safari doesn't support getEntriesByType('navigation') - fall back to performance.navigation
                    isNotBackForward = (navigation && navigation.length) ? navigation[0].type !== 'back_forward' : window.performance.navigation.type !== 2;

                if (titleNotAppended) {
                    // Use native JS to prepend option (faster)
                    this.selectpicker.view.titleOption.className = 'bs-title-option';
                    this.selectpicker.view.titleOption.value = '';

                    // Check if selected or data-selected attribute is already set on an option. If not, select the titleOption option.
                    // the selected item may have been changed by user or programmatically before the bootstrap select plugin runs,
                    // if so, the select will have the data-selected attribute
                    selectTitleOption = !selectedOption || (selectedIndex === firstSelectableIndex && selectedOption.defaultSelected === false && this.$element.data('selected') === undefined);
                }

                if (titleNotAppended || this.selectpicker.view.titleOption.index !== 0) {
                    element.insertBefore(this.selectpicker.view.titleOption, element.firstChild);
                }

                // Set selected *after* appending to select,
                // otherwise the option doesn't get selected in IE
                // set using selectedIndex, as setting the selected attr to true here doesn't work in IE11
                if (selectTitleOption && isNotBackForward) {
                    element.selectedIndex = 0;
                } else if (document.readyState !== 'complete') {
                    // if navigation type is back_forward, there's a chance the select will have its value set by BFCache
                    // wait for that value to be set, then run render again
                    window.addEventListener('pageshow', function () {
                        if (that.selectpicker.view.displayedValue !== element.value) that.render();
                    });
                }
            }

            return updateIndex;
        },

        fetchData: function (callback, type, page, searchValue) {
            type = type || 'data';

            var that = this,
                data = this.options.source[type],
                builtData;

            if (data) {
                this.options.virtualScroll = true;

                if (typeof data === 'function') {
                    data.call(
                        this,
                        function (data) {
                            builtData = that.buildData(data, type);
                            callback.call(that, builtData);
                        },
                        page,
                        searchValue
                    );
                } else if (Array.isArray(data)) {
                    builtData = that.buildData(data, type);
                    callback.call(that, builtData);
                }
            } else {
                builtData = this.buildData(false, type);
                callback.call(that, builtData);
            }
        },

        buildData: function (data, type) {
            var dataGetter = data === false ? getOptionData.fromOption : getOptionData.fromDataSource;

            var optionSelector = ':not([hidden]):not([data-hidden="true"])',
                mainData = [],
                startLen = 0,
                optID = 0,
                startIndex = this.setPlaceholder() && !data ? 1 : 0; // append the titleOption if necessary and skip the first option in the loop

            if (type === 'load') {
                startLen = this.selectpicker.main.data.length;
            } else if (type === 'search') {
                startLen = this.selectpicker.search.data.length;
            }

            if (this.options.hideDisabled) optionSelector += ':not(:disabled)';

            var selectOptions = data ? data.filter(filterHidden, this) : this.$element[0].querySelectorAll('select > *' + optionSelector);

            function addDivider (config) {
                var previousData = mainData[mainData.length - 1];

                // ensure optgroup doesn't create back-to-back dividers
                if (
                    previousData &&
                    previousData.type === 'divider' &&
                    (previousData.optID || config.optID)
                ) {
                    return;
                }

                config = config || {};
                config.type = 'divider';

                mainData.push(config);
            }

            function addOption (item, config) {
                config = config || {};

                config.divider = dataGetter(item, 'divider');

                if (config.divider === true) {
                    addDivider({
                        optID: config.optID
                    });
                } else {
                    var liIndex = mainData.length + startLen,
                        cssText = dataGetter(item, 'style'),
                        inlineStyle = cssText ? htmlEscape(cssText) : '',
                        optionClass = (item.className || '') + (config.optgroupClass || '');

                    if (config.optID) optionClass = 'opt ' + optionClass;

                    config.optionClass = optionClass.trim();
                    config.inlineStyle = inlineStyle;

                    config.text = dataGetter(item, 'text');
                    config.content = dataGetter(item, 'content');
                    config.tokens = dataGetter(item, 'tokens');
                    config.subtext = dataGetter(item, 'subtext');
                    config.icon = dataGetter(item, 'icon');

                    config.display = config.content || config.text;
                    config.value = item.value === undefined ? item.text : item.value;
                    config.type = 'option';
                    config.index = liIndex;

                    config.option = !item.option ? item : item.option; // reference option element if it exists
                    config.option.liIndex = liIndex;
                    config.selected = !!item.selected;
                    config.disabled = config.disabled || !!item.disabled;

                    mainData.push(config);
                }
            }

            function addOptgroup (index, selectOptions) {
                var optgroup = selectOptions[index],
                    // skip placeholder option
                    previous = index - 1 < startIndex ? false : selectOptions[index - 1],
                    next = selectOptions[index + 1],
                    options = data ? optgroup.children.filter(filterHidden, this) : optgroup.querySelectorAll('option' + optionSelector);

                if (!options.length) return;

                var config = {
                        display: htmlEscape(dataGetter(item, 'label')),
                        subtext: dataGetter(optgroup, 'subtext'),
                        icon: dataGetter(optgroup, 'icon'),
                        type: 'optgroup-label',
                        optgroupClass: ' ' + (optgroup.className || '')
                    },
                    headerIndex,
                    lastIndex;

                optID++;

                if (previous) {
                    addDivider({ optID: optID });
                }

                config.optID = optID;

                mainData.push(config);

                for (var j = 0, len = options.length; j < len; j++) {
                    var option = options[j];

                    if (j === 0) {
                        headerIndex = mainData.length - 1;
                        lastIndex = headerIndex + len;
                    }

                    addOption(option, {
                        headerIndex: headerIndex,
                        lastIndex: lastIndex,
                        optID: config.optID,
                        optgroupClass: config.optgroupClass,
                        disabled: optgroup.disabled
                    });
                }

                if (next) {
                    addDivider({ optID: optID });
                }
            }

            for (var len = selectOptions.length, i = startIndex; i < len; i++) {
                var item = selectOptions[i],
                    children = item.children;

                if (children && children.length) {
                    addOptgroup.call(this, i, selectOptions);
                } else {
                    addOption.call(this, item, {});
                }
            }

            switch (type) {
                case 'data': {
                    this.selectpicker.main.data = this.selectpicker.current.data = mainData;
                    break;
                }
                case 'load': {
                    Array.prototype.push.apply(this.selectpicker.main.data, mainData);
                    this.selectpicker.current.data = this.selectpicker.main.data;
                    break;
                }
                case 'search': {
                    Array.prototype.push.apply(this.selectpicker.search.data, mainData);
                    break;
                }
            }

            return mainData;
        },

        buildList: function (size, searching) {
            var that = this,
                selectData = searching ? this.selectpicker.search.data : this.selectpicker.main.data,
                mainElements = [],
                widestOptionLength = 0;

            if ((that.options.showTick || that.multiple) && !elementTemplates.checkMark.parentNode) {
                elementTemplates.checkMark.className = this.options.iconBase + ' ' + that.options.tickIcon + ' check-mark';
                elementTemplates.a.appendChild(elementTemplates.checkMark);
            }

            function buildElement (mainElements, item) {
                var liElement,
                    combinedLength = 0;

                switch (item.type) {
                    case 'divider':
                        liElement = generateOption.li(
                            false,
                            classNames.DIVIDER,
                            (item.optID ? item.optID + 'div' : undefined)
                        );

                        break;

                    case 'option':
                        liElement = generateOption.li(
                            generateOption.a(
                                generateOption.text.call(that, item),
                                item.optionClass,
                                item.inlineStyle
                            ),
                            '',
                            item.optID
                        );

                        if (liElement.firstChild) {
                            liElement.firstChild.id = that.selectId + '-' + item.index;
                        }

                        break;

                    case 'optgroup-label':
                        liElement = generateOption.li(
                            generateOption.label.call(that, item),
                            'dropdown-header' + item.optgroupClass,
                            item.optID
                        );

                        break;
                }

                item.element = liElement;
                mainElements.push(liElement);

                // count the number of characters in the option - not perfect, but should work in most cases
                if (item.display) combinedLength += item.display.length;
                if (item.subtext) combinedLength += item.subtext.length;
                // if there is an icon, ensure this option's width is checked
                if (item.icon) combinedLength += 1;

                if (combinedLength > widestOptionLength) {
                    widestOptionLength = combinedLength;

                    // guess which option is the widest
                    // use this when calculating menu width
                    // not perfect, but it's fast, and the width will be updating accordingly when scrolling
                    that.selectpicker.view.widestOption = mainElements[mainElements.length - 1];
                }
            }

            var startIndex = size || 0;

            for (var len = selectData.length, i = startIndex; i < len; i++) {
                var item = selectData[i];

                buildElement(mainElements, item);
            }

            if (size) {
                if (searching) {
                    Array.prototype.push.apply(this.selectpicker.search.elements, mainElements);
                } else {
                    Array.prototype.push.apply(this.selectpicker.main.elements, mainElements);
                    this.selectpicker.current.elements = this.selectpicker.main.elements;
                }
            } else {
                if (searching) {
                    this.selectpicker.search.elements = mainElements;
                } else {
                    this.selectpicker.main.elements = this.selectpicker.current.elements = mainElements;
                }
            }
        },

        findLis: function () {
            return this.$menuInner.find('.inner > li');
        },

        render: function (init) {
            var that = this,
                element = this.$element[0],
                // ensure titleOption is appended and selected (if necessary) before getting selectedOptions
                placeholderSelected = this.setPlaceholder() && element.selectedIndex === 0,
                selectedOptions = getSelectedOptions.call(this),
                selectedCount = selectedOptions.length,
                selectedValues = getSelectValues.call(this, selectedOptions),
                button = this.$button[0],
                buttonInner = button.querySelector('.filter-option-inner-inner'),
                multipleSeparator = document.createTextNode(this.options.multipleSeparator),
                titleFragment = elementTemplates.fragment.cloneNode(false),
                showCount,
                countMax,
                hasContent = false;

            function createSelected (item) {
                if (item.selected) {
                    that.createOption(item, true);
                } else if (item.children && item.children.length) {
                    item.children.map(createSelected);
                }
            }

            // create selected option elements to ensure select value is correct
            if (this.options.source.data && init) {
                selectedOptions.map(createSelected);
                element.appendChild(this.selectpicker.main.optionQueue);

                if (placeholderSelected) placeholderSelected = element.selectedIndex === 0;
            }

            button.classList.toggle('bs-placeholder', that.multiple ? !selectedCount : !selectedValues && selectedValues !== 0);

            if (!that.multiple && selectedOptions.length === 1) {
                that.selectpicker.view.displayedValue = selectedValues;
            }

            if (this.options.selectedTextFormat === 'static') {
                titleFragment = generateOption.text.call(this, { text: this.options.placeholder }, true);
            } else {
                showCount = this.multiple && this.options.selectedTextFormat.indexOf('count') !== -1 && selectedCount > 0;

                // determine if the number of selected options will be shown (showCount === true)
                if (showCount) {
                    countMax = this.options.selectedTextFormat.split('>');
                    showCount = (countMax.length > 1 && selectedCount > countMax[1]) || (countMax.length === 1 && selectedCount >= 2);
                }

                // only loop through all selected options if the count won't be shown
                if (showCount === false) {
                    if (!placeholderSelected) {
                        for (var selectedIndex = 0; selectedIndex < selectedCount; selectedIndex++) {
                            if (selectedIndex < 50) {
                                var option = selectedOptions[selectedIndex],
                                    titleOptions = {};

                                if (option) {
                                    if (this.multiple && selectedIndex > 0) {
                                        titleFragment.appendChild(multipleSeparator.cloneNode(false));
                                    }

                                    if (option.title) {
                                        titleOptions.text = option.title;
                                    } else if (option.content && that.options.showContent) {
                                        titleOptions.content = option.content.toString();
                                        hasContent = true;
                                    } else {
                                        if (that.options.showIcon) {
                                            titleOptions.icon = option.icon;
                                        }
                                        if (that.options.showSubtext && !that.multiple && option.subtext) titleOptions.subtext = ' ' + option.subtext;
                                        titleOptions.text = option.text.trim();
                                    }

                                    titleFragment.appendChild(generateOption.text.call(this, titleOptions, true));
                                }
                            } else {
                                break;
                            }
                        }

                        // add ellipsis
                        if (selectedCount > 49) {
                            titleFragment.appendChild(document.createTextNode('...'));
                        }
                    }
                } else {
                    var optionSelector = ':not([hidden]):not([data-hidden="true"]):not([data-divider="true"])';
                    if (this.options.hideDisabled) optionSelector += ':not(:disabled)';

                    // If this is a multiselect, and selectedTextFormat is count, then show 1 of 2 selected, etc.
                    var totalCount = this.$element[0].querySelectorAll('select > option' + optionSelector + ', optgroup' + optionSelector + ' option' + optionSelector).length,
                        tr8nText = (typeof this.options.countSelectedText === 'function') ? this.options.countSelectedText(selectedCount, totalCount) : this.options.countSelectedText;

                    titleFragment = generateOption.text.call(this, {
                        text: tr8nText.replace('{0}', selectedCount.toString()).replace('{1}', totalCount.toString())
                    }, true);
                }
            }

            // If the select doesn't have a title, then use the default, or if nothing is set at all, use noneSelectedText
            if (!titleFragment.childNodes.length) {
                titleFragment = generateOption.text.call(this, {
                    text: this.options.placeholder ? this.options.placeholder : this.options.noneSelectedText
                }, true);
            }

            // if the select has a title, apply it to the button, and if not, apply titleFragment text
            // strip all HTML tags and trim the result, then unescape any escaped tags
            button.title = titleFragment.textContent.replace(/<[^>]*>?/g, '').trim();

            if (this.options.sanitize && hasContent) {
                sanitizeHtml([titleFragment], that.options.whiteList, that.options.sanitizeFn);
            }

            buttonInner.innerHTML = '';
            buttonInner.appendChild(titleFragment);

            if (version.major < 4 && this.$newElement[0].classList.contains('bs3-has-addon')) {
                var filterExpand = button.querySelector('.filter-expand'),
                    clone = buttonInner.cloneNode(true);

                clone.className = 'filter-expand';

                if (filterExpand) {
                    button.replaceChild(clone, filterExpand);
                } else {
                    button.appendChild(clone);
                }
            }

            this.$element.trigger('rendered' + EVENT_KEY);
        },

        /**
         * @param [style]
         * @param [status]
         */
        setStyle: function (newStyle, status) {
            var button = this.$button[0],
                newElement = this.$newElement[0],
                style = this.options.style.trim(),
                buttonClass;

            if (this.$element.attr('class')) {
                this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ''));
            }

            if (version.major < 4) {
                newElement.classList.add('bs3');

                if (newElement.parentNode.classList && newElement.parentNode.classList.contains('input-group') &&
                    (newElement.previousElementSibling || newElement.nextElementSibling) &&
                    (newElement.previousElementSibling || newElement.nextElementSibling).classList.contains('input-group-addon')
                ) {
                    newElement.classList.add('bs3-has-addon');
                }
            }

            if (newStyle) {
                buttonClass = newStyle.trim();
            } else {
                buttonClass = style;
            }

            if (status == 'add') {
                if (buttonClass) button.classList.add.apply(button.classList, buttonClass.split(' '));
            } else if (status == 'remove') {
                if (buttonClass) button.classList.remove.apply(button.classList, buttonClass.split(' '));
            } else {
                if (style) button.classList.remove.apply(button.classList, style.split(' '));
                if (buttonClass) button.classList.add.apply(button.classList, buttonClass.split(' '));
            }
        },

        liHeight: function (refresh) {
            if (!refresh && (this.options.size === false || Object.keys(this.sizeInfo).length)) return;

            var newElement = elementTemplates.div.cloneNode(false),
                menu = elementTemplates.div.cloneNode(false),
                menuInner = elementTemplates.div.cloneNode(false),
                menuInnerInner = document.createElement('ul'),
                divider = elementTemplates.li.cloneNode(false),
                dropdownHeader = elementTemplates.li.cloneNode(false),
                li,
                a = elementTemplates.a.cloneNode(false),
                text = elementTemplates.span.cloneNode(false),
                header = this.options.header && this.$menu.find('.' + classNames.POPOVERHEADER).length > 0 ? this.$menu.find('.' + classNames.POPOVERHEADER)[0].cloneNode(true) : null,
                search = this.options.liveSearch ? elementTemplates.div.cloneNode(false) : null,
                actions = this.options.actionsBox && this.multiple && this.$menu.find('.bs-actionsbox').length > 0 ? this.$menu.find('.bs-actionsbox')[0].cloneNode(true) : null,
                doneButton = this.options.doneButton && this.multiple && this.$menu.find('.bs-donebutton').length > 0 ? this.$menu.find('.bs-donebutton')[0].cloneNode(true) : null,
                firstOption = this.$element[0].options[0];

            this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth;

            text.className = 'text';
            a.className = 'dropdown-item ' + (firstOption ? firstOption.className : '');
            newElement.className = this.$menu[0].parentNode.className + ' ' + classNames.SHOW;
            newElement.style.width = 0; // ensure button width doesn't affect natural width of menu when calculating
            if (this.options.width === 'auto') menu.style.minWidth = 0;
            menu.className = classNames.MENU + ' ' + classNames.SHOW;
            menuInner.className = 'inner ' + classNames.SHOW;
            menuInnerInner.className = classNames.MENU + ' inner ' + (version.major >= '4' ? classNames.SHOW : '');
            divider.className = classNames.DIVIDER;
            dropdownHeader.className = 'dropdown-header';

            text.appendChild(document.createTextNode('\u200b'));

            if (this.selectpicker.current.data.length) {
                for (var i = 0; i < this.selectpicker.current.data.length; i++) {
                    var data = this.selectpicker.current.data[i];
                    if (data.type === 'option') {
                        li = data.element;
                        break;
                    }
                }
            } else {
                li = elementTemplates.li.cloneNode(false);
                a.appendChild(text);
                li.appendChild(a);
            }

            dropdownHeader.appendChild(text.cloneNode(true));

            if (this.selectpicker.view.widestOption) {
                menuInnerInner.appendChild(this.selectpicker.view.widestOption.cloneNode(true));
            }

            menuInnerInner.appendChild(li);
            menuInnerInner.appendChild(divider);
            menuInnerInner.appendChild(dropdownHeader);
            if (header) menu.appendChild(header);
            if (search) {
                var input = document.createElement('input');
                search.className = 'bs-searchbox';
                input.className = 'form-control';
                search.appendChild(input);
                menu.appendChild(search);
            }
            if (actions) menu.appendChild(actions);
            menuInner.appendChild(menuInnerInner);
            menu.appendChild(menuInner);
            if (doneButton) menu.appendChild(doneButton);
            newElement.appendChild(menu);

            document.body.appendChild(newElement);

            var liHeight = li.offsetHeight,
                dropdownHeaderHeight = dropdownHeader ? dropdownHeader.offsetHeight : 0,
                headerHeight = header ? header.offsetHeight : 0,
                searchHeight = search ? search.offsetHeight : 0,
                actionsHeight = actions ? actions.offsetHeight : 0,
                doneButtonHeight = doneButton ? doneButton.offsetHeight : 0,
                dividerHeight = $(divider).outerHeight(true),
                menuStyle = window.getComputedStyle(menu),
                menuWidth = menu.offsetWidth,
                menuPadding = {
                    vert: toInteger(menuStyle.paddingTop) +
                        toInteger(menuStyle.paddingBottom) +
                        toInteger(menuStyle.borderTopWidth) +
                        toInteger(menuStyle.borderBottomWidth),
                    horiz: toInteger(menuStyle.paddingLeft) +
                        toInteger(menuStyle.paddingRight) +
                        toInteger(menuStyle.borderLeftWidth) +
                        toInteger(menuStyle.borderRightWidth)
                },
                menuExtras = {
                    vert: menuPadding.vert +
                        toInteger(menuStyle.marginTop) +
                        toInteger(menuStyle.marginBottom) + 2,
                    horiz: menuPadding.horiz +
                        toInteger(menuStyle.marginLeft) +
                        toInteger(menuStyle.marginRight) + 2
                },
                scrollBarWidth;

            menuInner.style.overflowY = 'scroll';

            scrollBarWidth = menu.offsetWidth - menuWidth;

            document.body.removeChild(newElement);

            this.sizeInfo.liHeight = liHeight;
            this.sizeInfo.dropdownHeaderHeight = dropdownHeaderHeight;
            this.sizeInfo.headerHeight = headerHeight;
            this.sizeInfo.searchHeight = searchHeight;
            this.sizeInfo.actionsHeight = actionsHeight;
            this.sizeInfo.doneButtonHeight = doneButtonHeight;
            this.sizeInfo.dividerHeight = dividerHeight;
            this.sizeInfo.menuPadding = menuPadding;
            this.sizeInfo.menuExtras = menuExtras;
            this.sizeInfo.menuWidth = menuWidth;
            this.sizeInfo.menuInnerInnerWidth = menuWidth - menuPadding.horiz;
            this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth;
            this.sizeInfo.scrollBarWidth = scrollBarWidth;
            this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight;

            this.setPositionData();
        },

        getSelectPosition: function () {
            var that = this,
                $window = $(window),
                pos = that.$newElement.offset(),
                $container = $(that.options.container),
                containerPos;

            if (that.options.container && $container.length && !$container.is('body')) {
                containerPos = $container.offset();
                containerPos.top += parseInt($container.css('borderTopWidth'));
                containerPos.left += parseInt($container.css('borderLeftWidth'));
            } else {
                containerPos = { top: 0, left: 0 };
            }

            var winPad = that.options.windowPadding;

            this.sizeInfo.selectOffsetTop = pos.top - containerPos.top - $window.scrollTop();
            this.sizeInfo.selectOffsetBot = $window.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo.selectHeight - containerPos.top - winPad[2];
            this.sizeInfo.selectOffsetLeft = pos.left - containerPos.left - $window.scrollLeft();
            this.sizeInfo.selectOffsetRight = $window.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo.selectWidth - containerPos.left - winPad[1];
            this.sizeInfo.selectOffsetTop -= winPad[0];
            this.sizeInfo.selectOffsetLeft -= winPad[3];
        },

        setMenuSize: function (isAuto) {
            this.getSelectPosition();

            var selectWidth = this.sizeInfo.selectWidth,
                liHeight = this.sizeInfo.liHeight,
                headerHeight = this.sizeInfo.headerHeight,
                searchHeight = this.sizeInfo.searchHeight,
                actionsHeight = this.sizeInfo.actionsHeight,
                doneButtonHeight = this.sizeInfo.doneButtonHeight,
                divHeight = this.sizeInfo.dividerHeight,
                menuPadding = this.sizeInfo.menuPadding,
                menuInnerHeight,
                menuHeight,
                divLength = 0,
                minHeight,
                _minHeight,
                maxHeight,
                menuInnerMinHeight,
                estimate,
                isDropup;

            if (this.options.dropupAuto) {
                // Get the estimated height of the menu without scrollbars.
                // This is useful for smaller menus, where there might be plenty of room
                // below the button without setting dropup, but we can't know
                // the exact height of the menu until createView is called later
                estimate = liHeight * this.selectpicker.current.data.length + menuPadding.vert;

                isDropup = this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && estimate + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot;

                // ensure dropup doesn't change while searching (so menu doesn't bounce back and forth)
                if (this.selectpicker.isSearching === true) {
                    isDropup = this.selectpicker.dropup;
                }

                this.$newElement.toggleClass(classNames.DROPUP, isDropup);
                this.selectpicker.dropup = isDropup;
            }

            if (this.options.size === 'auto') {
                _minHeight = this.selectpicker.current.data.length > 3 ? this.sizeInfo.liHeight * 3 + this.sizeInfo.menuExtras.vert - 2 : 0;
                menuHeight = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert;
                minHeight = _minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;
                menuInnerMinHeight = Math.max(_minHeight - menuPadding.vert, 0);

                if (this.$newElement.hasClass(classNames.DROPUP)) {
                    menuHeight = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert;
                }

                maxHeight = menuHeight;
                menuInnerHeight = menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding.vert;
            } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {
                for (var i = 0; i < this.options.size; i++) {
                    if (this.selectpicker.current.data[i].type === 'divider') divLength++;
                }

                menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding.vert;
                menuInnerHeight = menuHeight - menuPadding.vert;
                maxHeight = menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;
                minHeight = menuInnerMinHeight = '';
            }

            this.$menu.css({
                'max-height': maxHeight + 'px',
                'overflow': 'hidden',
                'min-height': minHeight + 'px'
            });

            this.$menuInner.css({
                'max-height': menuInnerHeight + 'px',
                'overflow': 'hidden auto',
                'min-height': menuInnerMinHeight + 'px'
            });

            // ensure menuInnerHeight is always a positive number to prevent issues calculating chunkSize in createView
            this.sizeInfo.menuInnerHeight = Math.max(menuInnerHeight, 1);

            if (this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight) {
                this.sizeInfo.hasScrollBar = true;
                this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth;
            }

            if (this.options.dropdownAlignRight === 'auto') {
                this.$menu.toggleClass(classNames.MENURIGHT, this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < (this.sizeInfo.totalMenuWidth - selectWidth));
            }

            if (this.dropdown && this.dropdown._popper) this.dropdown._popper.update();
        },

        setSize: function (refresh) {
            this.liHeight(refresh);

            if (this.options.header) this.$menu.css('padding-top', 0);

            if (this.options.size !== false) {
                var that = this,
                    $window = $(window);

                this.setMenuSize();

                if (this.options.liveSearch) {
                    this.$searchbox
                        .off('input.setMenuSize propertychange.setMenuSize')
                        .on('input.setMenuSize propertychange.setMenuSize', function () {
                            return that.setMenuSize();
                        });
                }

                if (this.options.size === 'auto') {
                    $window
                        .off('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize')
                        .on('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize', function () {
                            return that.setMenuSize();
                        });
                } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {
                    $window.off('resize' + EVENT_KEY + '.' + this.selectId + '.setMenuSize' + ' scroll' + EVENT_KEY + '.' + this.selectId + '.setMenuSize');
                }
            }

            this.createView(false, true, refresh);
        },

        setWidth: function () {
            var that = this;

            if (this.options.width === 'auto') {
                requestAnimationFrame(function () {
                    that.$menu.css('min-width', '0');

                    that.$element.on('loaded' + EVENT_KEY, function () {
                        that.liHeight();
                        that.setMenuSize();

                        // Get correct width if element is hidden
                        var $selectClone = that.$newElement.clone().appendTo('body'),
                            btnWidth = $selectClone.css('width', 'auto').children('button').outerWidth();

                        $selectClone.remove();

                        // Set width to whatever's larger, button title or longest option
                        that.sizeInfo.selectWidth = Math.max(that.sizeInfo.totalMenuWidth, btnWidth);
                        that.$newElement.css('width', that.sizeInfo.selectWidth + 'px');
                    });
                });
            } else if (this.options.width === 'fit') {
                // Remove inline min-width so width can be changed from 'auto'
                this.$menu.css('min-width', '');
                this.$newElement.css('width', '').addClass('fit-width');
            } else if (this.options.width) {
                // Remove inline min-width so width can be changed from 'auto'
                this.$menu.css('min-width', '');
                this.$newElement.css('width', this.options.width);
            } else {
                // Remove inline min-width/width so width can be changed
                this.$menu.css('min-width', '');
                this.$newElement.css('width', '');
            }
            // Remove fit-width class if width is changed programmatically
            if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {
                this.$newElement[0].classList.remove('fit-width');
            }
        },

        selectPosition: function () {
            this.$bsContainer = $('<div class="bs-container" />');

            var that = this,
                $container = $(this.options.container),
                pos,
                containerPos,
                actualHeight,
                getPlacement = function ($element) {
                    var containerPosition = {},
                        // fall back to dropdown's default display setting if display is not manually set
                        display = that.options.display || (
                            // Bootstrap 3 doesn't have $.fn.dropdown.Constructor.Default
                            $.fn.dropdown.Constructor.Default ? $.fn.dropdown.Constructor.Default.display
                                : false
                        );

                    that.$bsContainer.addClass($element.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass(classNames.DROPUP, $element.hasClass(classNames.DROPUP));
                    pos = $element.offset();

                    if (!$container.is('body')) {
                        containerPos = $container.offset();
                        containerPos.top += parseInt($container.css('borderTopWidth')) - $container.scrollTop();
                        containerPos.left += parseInt($container.css('borderLeftWidth')) - $container.scrollLeft();
                    } else {
                        containerPos = { top: 0, left: 0 };
                    }

                    actualHeight = $element.hasClass(classNames.DROPUP) ? 0 : $element[0].offsetHeight;

                    // Bootstrap 4+ uses Popper for menu positioning
                    if (version.major < 4 || display === 'static') {
                        containerPosition.top = pos.top - containerPos.top + actualHeight;
                        containerPosition.left = pos.left - containerPos.left;
                    }

                    containerPosition.width = $element[0].offsetWidth;

                    that.$bsContainer.css(containerPosition);
                };

            this.$button.on('click.bs.dropdown.data-api', function () {
                if (that.isDisabled()) {
                    return;
                }

                getPlacement(that.$newElement);

                that.$bsContainer
                    .appendTo(that.options.container)
                    .toggleClass(classNames.SHOW, !that.$button.hasClass(classNames.SHOW))
                    .append(that.$menu);
            });

            $(window)
                .off('resize' + EVENT_KEY + '.' + this.selectId + ' scroll' + EVENT_KEY + '.' + this.selectId)
                .on('resize' + EVENT_KEY + '.' + this.selectId + ' scroll' + EVENT_KEY + '.' + this.selectId, function () {
                    var isActive = that.$newElement.hasClass(classNames.SHOW);

                    if (isActive) getPlacement(that.$newElement);
                });

            this.$element.on('hide' + EVENT_KEY, function () {
                that.$menu.data('height', that.$menu.height());
                that.$bsContainer.detach();
            });
        },

        createOption: function (data, init) {
            var optionData = !data.option ? data : data.option;

            if (optionData && optionData.nodeType !== 1) {
                var option = (init ? elementTemplates.selectedOption : elementTemplates.option).cloneNode(true);
                if (optionData.value !== undefined) option.value = optionData.value;
                option.textContent = optionData.text;

                option.selected = true;

                if (optionData.liIndex !== undefined) {
                    option.liIndex = optionData.liIndex;
                } else if (!init) {
                    option.liIndex = data.index;
                }

                data.option = option;

                this.selectpicker.main.optionQueue.appendChild(option);
            }
        },

        setOptionStatus: function (selectedOnly) {
            var that = this;

            that.noScroll = false;

            if (that.selectpicker.view.visibleElements && that.selectpicker.view.visibleElements.length) {
                for (var i = 0; i < that.selectpicker.view.visibleElements.length; i++) {
                    var liData = that.selectpicker.current.data[i + that.selectpicker.view.position0],
                        option = liData.option;

                    if (option) {
                        if (selectedOnly !== true) {
                            that.setDisabled(liData);
                        }

                        that.setSelected(liData);
                    }
                }

                // append optionQueue (documentFragment with option elements for select options)
                if (this.options.source.data) this.$element[0].appendChild(this.selectpicker.main.optionQueue);
            }
        },

        /**
         * @param {number} index - the index of the option that is being changed
         * @param {boolean} selected - true if the option is being selected, false if being deselected
         */
        setSelected: function (liData, selected) {
            selected = selected === undefined ? liData.selected : selected;

            var index = liData.index,
                li = liData.element,
                activeIndexIsSet = this.activeIndex !== undefined,
                thisIsActive = this.activeIndex === index,
                prevActive,
                a,
                // if current option is already active
                // OR
                // if the current option is being selected, it's NOT multiple, and
                // activeIndex is undefined:
                //  - when the menu is first being opened, OR
                //  - after a search has been performed, OR
                //  - when retainActive is false when selecting a new option (i.e. index of the newly selected option is not the same as the current activeIndex)
                keepActive = thisIsActive || (selected && !this.multiple && !activeIndexIsSet);

            if (!li) return;

            if (selected !== undefined) {
                liData.selected = selected;
                if (liData.option) liData.option.selected = selected;
            }

            if (selected && this.options.source.data) {
                this.createOption(liData, false);
            }

            a = li.firstChild;

            if (selected) {
                this.selectedIndex = index;
            }

            li.classList.toggle('selected', selected);

            if (keepActive) {
                this.focusItem(li, liData);
                this.selectpicker.view.currentActive = li;
                this.activeIndex = index;
            } else {
                this.defocusItem(li);
            }

            if (a) {
                a.classList.toggle('selected', selected);

                if (selected) {
                    a.setAttribute('aria-selected', true);
                } else {
                    if (this.multiple) {
                        a.setAttribute('aria-selected', false);
                    } else {
                        a.removeAttribute('aria-selected');
                    }
                }
            }

            if (!keepActive && !activeIndexIsSet && selected && this.prevActiveIndex !== undefined) {
                prevActive = this.selectpicker.main.elements[this.prevActiveIndex];

                this.defocusItem(prevActive);
            }
        },

        /**
         * @param {number} index - the index of the option that is being disabled
         * @param {boolean} disabled - true if the option is being disabled, false if being enabled
         */
        setDisabled: function (liData) {
            var disabled = liData.disabled,
                li = liData.element,
                a;

            if (!li) return;

            a = li.firstChild;

            li.classList.toggle(classNames.DISABLED, disabled);

            if (a) {
                if (version.major >= '4') a.classList.toggle(classNames.DISABLED, disabled);

                if (disabled) {
                    a.setAttribute('aria-disabled', disabled);
                    a.setAttribute('tabindex', -1);
                } else {
                    a.removeAttribute('aria-disabled');
                    a.setAttribute('tabindex', 0);
                }
            }
        },

        isDisabled: function () {
            return this.$element[0].disabled;
        },

        checkDisabled: function () {
            if (this.isDisabled()) {
                this.$newElement[0].classList.add(classNames.DISABLED);
                this.$button.addClass(classNames.DISABLED).attr('aria-disabled', true);
            } else {
                if (this.$button[0].classList.contains(classNames.DISABLED)) {
                    this.$newElement[0].classList.remove(classNames.DISABLED);
                    this.$button.removeClass(classNames.DISABLED).attr('aria-disabled', false);
                }
            }
        },

        clickListener: function () {
            var that = this,
                $document = $(document);

            $document.data('spaceSelect', false);

            this.$button.on('keyup', function (e) {
                if (/(32)/.test(e.keyCode.toString(10)) && $document.data('spaceSelect')) {
                    e.preventDefault();
                    $document.data('spaceSelect', false);
                }
            });

            this.$newElement.on('show.bs.dropdown', function () {
                if (!that.dropdown && version.major === '4') {
                    that.dropdown = that.$button.data('bs.dropdown');
                    that.dropdown._menu = that.$menu[0];
                }
            });

            function clearSelection (e) {
                if (that.multiple) {
                    that.deselectAll();
                } else {
                    var element = that.$element[0],
                        prevValue = element.value,
                        prevIndex = element.selectedIndex,
                        prevOption = element.options[prevIndex],
                        prevData = prevOption ? that.selectpicker.main.data[prevOption.liIndex] : false;

                    if (prevData) {
                        that.setSelected(prevData, false);
                    }

                    element.selectedIndex = 0;

                    changedArguments = [prevIndex, false, prevValue];
                    that.$element.triggerNative('change');
                }

                // remove selected styling if menu is open
                if (that.$newElement.hasClass(classNames.SHOW)) {
                    if (that.options.liveSearch) {
                        that.$searchbox.trigger('focus');
                    }

                    that.createView(false);
                }
            }

            this.$button.on('click.bs.dropdown.data-api', function (e) {
                if (that.options.allowClear) {
                    var target = e.target,
                        clearButton = that.$clearButton[0];

                    if (target === clearButton || target.parentElement === clearButton) {
                        e.stopImmediatePropagation();
                        clearSelection(e);
                    }
                }

                if (!that.$newElement.hasClass(classNames.SHOW)) {
                    that.setSize();
                }
            });

            function setFocus () {
                if (that.options.liveSearch) {
                    that.$searchbox.trigger('focus');
                } else {
                    that.$menuInner.trigger('focus');
                }
            }

            function checkPopperExists () {
                if (that.dropdown && that.dropdown._popper && that.dropdown._popper.state) {
                    setFocus();
                } else {
                    requestAnimationFrame(checkPopperExists);
                }
            }

            this.$element.on('shown' + EVENT_KEY, function () {
                if (that.$menuInner[0].scrollTop !== that.selectpicker.view.scrollTop) {
                    that.$menuInner[0].scrollTop = that.selectpicker.view.scrollTop;
                }

                if (version.major > 3) {
                    requestAnimationFrame(checkPopperExists);
                } else {
                    setFocus();
                }
            });

            // ensure posinset and setsize are correct before selecting an option via a click
            this.$menuInner.on('mouseenter', 'li a', function (e) {
                var hoverLi = this.parentElement,
                    position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0,
                    index = Array.prototype.indexOf.call(hoverLi.parentElement.children, hoverLi),
                    hoverData = that.selectpicker.current.data[index + position0];

                that.focusItem(hoverLi, hoverData, true);
            });

            this.$menuInner.on('click', 'li a', function (e, retainActive) {
                var $this = $(this),
                    element = that.$element[0],
                    position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0,
                    clickedData = that.selectpicker.current.data[$this.parent().index() + position0],
                    clickedIndex = clickedData.index,
                    prevValue = getSelectValues.call(that),
                    prevIndex = element.selectedIndex,
                    prevOption = element.options[prevIndex],
                    prevData = prevOption ? that.selectpicker.main.data[prevOption.liIndex] : false,
                    triggerChange = true;

                // Don't close on multi choice menu
                if (that.multiple && that.options.maxOptions !== 1) {
                    e.stopPropagation();
                }

                e.preventDefault();

                // Don't run if the select is disabled
                if (!that.isDisabled() && !$this.parent().hasClass(classNames.DISABLED)) {
                    var option = clickedData.option,
                        $option = $(option),
                        state = option.selected,
                        $optgroup = $option.parent('optgroup'),
                        $optgroupOptions = $optgroup.find('option'),
                        maxOptions = that.options.maxOptions,
                        maxOptionsGrp = $optgroup.data('maxOptions') || false;

                    if (clickedIndex === that.activeIndex) retainActive = true;

                    if (!retainActive) {
                        that.prevActiveIndex = that.activeIndex;
                        that.activeIndex = undefined;
                    }

                    if (!that.multiple) { // Deselect previous option if not multi select
                        if (prevData) that.setSelected(prevData, false);
                        that.setSelected(clickedData, true);
                    } else { // Toggle the clicked option if multi select.
                        that.setSelected(clickedData, !state);
                        that.focusedParent.focus();

                        if (maxOptions !== false || maxOptionsGrp !== false) {
                            var maxReached = maxOptions < getSelectedOptions.call(that).length,
                                maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length;

                            if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {
                                if (maxOptions && maxOptions == 1) {
                                    element.selectedIndex = -1;
                                    option.selected = true;
                                    that.setOptionStatus(true);
                                } else if (maxOptionsGrp && maxOptionsGrp == 1) {
                                    for (var i = 0; i < $optgroupOptions.length; i++) {
                                        var _option = $optgroupOptions[i];
                                        _option.selected = false;
                                        that.setSelected(_option.liIndex, false);
                                    }

                                    option.selected = true;
                                    that.setSelected(clickedIndex, true);
                                } else {
                                    var maxOptionsText = typeof that.options.maxOptionsText === 'string' ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText,
                                        maxOptionsArr = typeof maxOptionsText === 'function' ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText,
                                        maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),
                                        maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),
                                        $notify = $('<div class="notify"></div>');
                                    // If {var} is set in array, replace it
                                    /** @deprecated */
                                    if (maxOptionsArr[2]) {
                                        maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);
                                        maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);
                                    }

                                    option.selected = false;

                                    that.$menu.append($notify);

                                    if (maxOptions && maxReached) {
                                        $notify.append($('<div>' + maxTxt + '</div>'));
                                        triggerChange = false;
                                        that.$element.trigger('maxReached' + EVENT_KEY);
                                    }

                                    if (maxOptionsGrp && maxReachedGrp) {
                                        $notify.append($('<div>' + maxTxtGrp + '</div>'));
                                        triggerChange = false;
                                        that.$element.trigger('maxReachedGrp' + EVENT_KEY);
                                    }

                                    setTimeout(function () {
                                        that.setSelected(clickedIndex, false);
                                    }, 10);

                                    $notify[0].classList.add('fadeOut');

                                    setTimeout(function () {
                                        $notify.remove();
                                    }, 1050);
                                }
                            }
                        }
                    }

                    if (that.options.source.data) that.$element[0].appendChild(that.selectpicker.main.optionQueue);

                    if (!that.multiple || (that.multiple && that.options.maxOptions === 1)) {
                        that.$button.trigger('focus');
                    } else if (that.options.liveSearch) {
                        that.$searchbox.trigger('focus');
                    }

                    // Trigger select 'change'
                    if (triggerChange) {
                        if (that.multiple || prevIndex !== element.selectedIndex) {
                            // $option.prop('selected') is current option state (selected/unselected). prevValue is the value of the select prior to being changed.
                            changedArguments = [option.index, $option.prop('selected'), prevValue];
                            that.$element
                                .triggerNative('change');
                        }
                    }
                }
            });

            this.$menu.on('click', 'li.' + classNames.DISABLED + ' a, .' + classNames.POPOVERHEADER + ', .' + classNames.POPOVERHEADER + ' :not(.close)', function (e) {
                if (e.currentTarget == this) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (that.options.liveSearch && !$(e.target).hasClass('close')) {
                        that.$searchbox.trigger('focus');
                    } else {
                        that.$button.trigger('focus');
                    }
                }
            });

            this.$menuInner.on('click', '.divider, .dropdown-header', function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (that.options.liveSearch) {
                    that.$searchbox.trigger('focus');
                } else {
                    that.$button.trigger('focus');
                }
            });

            this.$menu.on('click', '.' + classNames.POPOVERHEADER + ' .close', function () {
                that.$button.trigger('click');
            });

            this.$searchbox.on('click', function (e) {
                e.stopPropagation();
            });

            this.$menu.on('click', '.actions-btn', function (e) {
                if (that.options.liveSearch) {
                    that.$searchbox.trigger('focus');
                } else {
                    that.$button.trigger('focus');
                }

                e.preventDefault();
                e.stopPropagation();

                if ($(this).hasClass('bs-select-all')) {
                    that.selectAll();
                } else {
                    that.deselectAll();
                }
            });

            this.$button
                .on('focus' + EVENT_KEY, function (e) {
                    var tabindex = that.$element[0].getAttribute('tabindex');

                    // only change when button is actually focused
                    if (tabindex !== undefined && e.originalEvent && e.originalEvent.isTrusted) {
                        // apply select element's tabindex to ensure correct order is followed when tabbing to the next element
                        this.setAttribute('tabindex', tabindex);
                        // set element's tabindex to -1 to allow for reverse tabbing
                        that.$element[0].setAttribute('tabindex', -1);
                        that.selectpicker.view.tabindex = tabindex;
                    }
                })
                .on('blur' + EVENT_KEY, function (e) {
                    // revert everything to original tabindex
                    if (that.selectpicker.view.tabindex !== undefined && e.originalEvent && e.originalEvent.isTrusted) {
                        that.$element[0].setAttribute('tabindex', that.selectpicker.view.tabindex);
                        this.setAttribute('tabindex', -1);
                        that.selectpicker.view.tabindex = undefined;
                    }
                });

            this.$element
                .on('change' + EVENT_KEY, function () {
                    that.render();
                    that.$element.trigger('changed' + EVENT_KEY, changedArguments);
                    changedArguments = null;
                })
                .on('focus' + EVENT_KEY, function () {
                    if (!that.options.mobile) that.$button[0].focus();
                });
        },

        liveSearchListener: function () {
            var that = this;

            this.$button.on('click.bs.dropdown.data-api', function () {
                if (!!that.$searchbox.val()) {
                    that.$searchbox.val('');
                    that.selectpicker.search.previousValue = undefined;
                }
            });

            this.$searchbox.on('click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api', function (e) {
                e.stopPropagation();
            });

            this.$searchbox.on('input propertychange', function () {
                var searchValue = that.$searchbox[0].value;

                that.selectpicker.search.elements = [];
                that.selectpicker.search.data = [];

                if (searchValue) {
                    if (that.options.source.search) {
                        that.fetchData(function (builtData) {
                            that.render();
                            that.buildList(undefined, true);
                            that.createView(true);
                            showNoResults.call(that, builtData, searchValue);
                        }, 'search', 0, searchValue);
                    } else {
                        var i,
                            searchMatch = [],
                            q = searchValue.toUpperCase(),
                            cache = {},
                            cacheArr = [],
                            searchStyle = that._searchStyle(),
                            normalizeSearch = that.options.liveSearchNormalize;

                        if (normalizeSearch) q = normalizeToBase(q);

                        for (var i = 0; i < that.selectpicker.main.data.length; i++) {
                            var li = that.selectpicker.main.data[i];

                            if (!cache[i]) {
                                cache[i] = stringSearch(li, q, searchStyle, normalizeSearch);
                            }

                            if (cache[i] && li.headerIndex !== undefined && cacheArr.indexOf(li.headerIndex) === -1) {
                                if (li.headerIndex > 0) {
                                    cache[li.headerIndex - 1] = true;
                                    cacheArr.push(li.headerIndex - 1);
                                }

                                cache[li.headerIndex] = true;
                                cacheArr.push(li.headerIndex);

                                cache[li.lastIndex + 1] = true;
                            }

                            if (cache[i] && li.type !== 'optgroup-label') cacheArr.push(i);
                        }

                        for (var i = 0, cacheLen = cacheArr.length; i < cacheLen; i++) {
                            var index = cacheArr[i],
                                prevIndex = cacheArr[i - 1],
                                li = that.selectpicker.main.data[index],
                                liPrev = that.selectpicker.main.data[prevIndex];

                            if (li.type !== 'divider' || (li.type === 'divider' && liPrev && liPrev.type !== 'divider' && cacheLen - 1 !== i)) {
                                that.selectpicker.search.data.push(li);
                                searchMatch.push(that.selectpicker.main.elements[index]);
                            }
                        }

                        that.activeIndex = undefined;
                        that.noScroll = true;
                        that.$menuInner.scrollTop(0);
                        that.selectpicker.search.elements = searchMatch;
                        that.createView(true);
                        showNoResults.call(that, searchMatch, searchValue);
                    }
                } else if (that.selectpicker.search.previousValue) { // for IE11 (#2402)
                    that.$menuInner.scrollTop(0);
                    that.createView(false);
                }

                that.selectpicker.search.previousValue =  searchValue;
            });
        },

        _searchStyle: function () {
            return this.options.liveSearchStyle || 'contains';
        },

        val: function (value) {
            var element = this.$element[0];

            if (typeof value !== 'undefined') {
                var selectedOptions = getSelectedOptions.call(this),
                    prevValue = getSelectValues.call(this, selectedOptions);

                changedArguments = [null, null, prevValue];

                if (!Array.isArray(value)) value = [ value ];

                value.map(String);

                for (var i = 0; i < selectedOptions.length; i++) {
                    var item = selectedOptions[i];

                    if (item && value.indexOf(String(item.value)) === -1) {
                        this.setSelected(item, false);
                    }
                }

                // only update selected value if it matches an existing option
                this.selectpicker.main.data.filter(function (item) {
                    if (value.indexOf(String(item.value)) !== -1) {
                        this.setSelected(item, true);
                        return true;
                    }

                    return false;
                }, this);

                if (this.options.source.data) element.appendChild(this.selectpicker.main.optionQueue);

                this.$element.trigger('changed' + EVENT_KEY, changedArguments);

                if (this.$newElement.hasClass(classNames.SHOW)) {
                    if (this.multiple) {
                        this.setOptionStatus(true);
                    } else {
                        var liSelectedIndex = (element.options[element.selectedIndex] || {}).liIndex;

                        if (typeof liSelectedIndex === 'number') {
                            this.setSelected(this.selectedIndex, false);
                            this.setSelected(liSelectedIndex, true);
                        }
                    }
                }

                this.render();

                changedArguments = null;

                return this.$element;
            } else {
                return this.$element.val();
            }
        },

        changeAll: function (status) {
            if (!this.multiple) return;
            if (typeof status === 'undefined') status = true;

            var element = this.$element[0],
                previousSelected = 0,
                currentSelected = 0,
                prevValue = getSelectValues.call(this);

            element.classList.add('bs-select-hidden');

            for (var i = 0, data = this.selectpicker.current.data, len = data.length; i < len; i++) {
                var liData = data[i],
                    option = liData.option;

                if (option && !liData.disabled && liData.type !== 'divider') {
                    if (liData.selected) previousSelected++;
                    option.selected = status;
                    liData.selected = status;
                    if (status === true) currentSelected++;
                }
            }

            element.classList.remove('bs-select-hidden');

            if (previousSelected === currentSelected) return;

            this.setOptionStatus();

            changedArguments = [null, null, prevValue];

            this.$element
                .triggerNative('change');
        },

        selectAll: function () {
            return this.changeAll(true);
        },

        deselectAll: function () {
            return this.changeAll(false);
        },

        toggle: function (e, state) {
            var isActive,
                triggerClick = state === undefined;

            e = e || window.event;

            if (e) e.stopPropagation();

            if (triggerClick === false) {
                isActive = this.$newElement[0].classList.contains(classNames.SHOW);
                triggerClick = state === true && isActive === false || state === false && isActive === true;
            }

            if (triggerClick) this.$button.trigger('click.bs.dropdown.data-api');
        },

        open: function (e) {
            this.toggle(e, true);
        },

        close: function (e) {
            this.toggle(e, false);
        },

        keydown: function (e) {
            var $this = $(this),
                isToggle = $this.hasClass('dropdown-toggle'),
                $parent = isToggle ? $this.closest('.dropdown') : $this.closest(Selector.MENU),
                that = $parent.data('this'),
                $items = that.findLis(),
                index,
                isActive,
                liActive,
                activeLi,
                offset,
                updateScroll = false,
                downOnTab = e.which === keyCodes.TAB && !isToggle && !that.options.selectOnTab,
                isArrowKey = REGEXP_ARROW.test(e.which) || downOnTab,
                scrollTop = that.$menuInner[0].scrollTop,
                isVirtual = that.isVirtual(),
                position0 = isVirtual === true ? that.selectpicker.view.position0 : 0;

            // do nothing if a function key is pressed
            if (e.which >= 112 && e.which <= 123) return;

            isActive = that.$menu.hasClass(classNames.SHOW);

            if (
                !isActive &&
                (
                    isArrowKey ||
                    (e.which >= 48 && e.which <= 57) ||
                    (e.which >= 96 && e.which <= 105) ||
                    (e.which >= 65 && e.which <= 90)
                )
            ) {
                that.$button.trigger('click.bs.dropdown.data-api');

                if (that.options.liveSearch) {
                    that.$searchbox.trigger('focus');
                    return;
                }
            }

            if (e.which === keyCodes.ESCAPE && isActive) {
                e.preventDefault();
                that.$button.trigger('click.bs.dropdown.data-api').trigger('focus');
            }

            if (isArrowKey) { // if up or down
                if (!$items.length) return;

                liActive = that.selectpicker.main.elements[that.activeIndex];
                index = liActive ? Array.prototype.indexOf.call(liActive.parentElement.children, liActive) : -1;

                if (index !== -1) {
                    that.defocusItem(liActive);
                }

                if (e.which === keyCodes.ARROW_UP) { // up
                    if (index !== -1) index--;
                    if (index + position0 < 0) index += $items.length;

                    if (!that.selectpicker.view.canHighlight[index + position0]) {
                        index = that.selectpicker.view.canHighlight.slice(0, index + position0).lastIndexOf(true) - position0;
                        if (index === -1) index = $items.length - 1;
                    }
                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) { // down
                    index++;
                    if (index + position0 >= that.selectpicker.view.canHighlight.length) index = that.selectpicker.view.firstHighlightIndex;

                    if (!that.selectpicker.view.canHighlight[index + position0]) {
                        index = index + 1 + that.selectpicker.view.canHighlight.slice(index + position0 + 1).indexOf(true);
                    }
                }

                e.preventDefault();

                var liActiveIndex = position0 + index;

                if (e.which === keyCodes.ARROW_UP) { // up
                    // scroll to bottom and highlight last option
                    if (position0 === 0 && index === $items.length - 1) {
                        that.$menuInner[0].scrollTop = that.$menuInner[0].scrollHeight;

                        liActiveIndex = that.selectpicker.current.elements.length - 1;
                    } else {
                        activeLi = that.selectpicker.current.data[liActiveIndex];

                        // could be undefined if no results exist
                        if (activeLi) {
                            offset = activeLi.position - activeLi.height;

                            updateScroll = offset < scrollTop;
                        }
                    }
                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) { // down
                    // scroll to top and highlight first option
                    if (index === that.selectpicker.view.firstHighlightIndex) {
                        that.$menuInner[0].scrollTop = 0;

                        liActiveIndex = that.selectpicker.view.firstHighlightIndex;
                    } else {
                        activeLi = that.selectpicker.current.data[liActiveIndex];

                        // could be undefined if no results exist
                        if (activeLi) {
                            offset = activeLi.position - that.sizeInfo.menuInnerHeight;

                            updateScroll = offset > scrollTop;
                        }
                    }
                }

                liActive = that.selectpicker.current.elements[liActiveIndex];

                that.activeIndex = (that.selectpicker.current.data[liActiveIndex] || {}).index;

                that.focusItem(liActive);

                that.selectpicker.view.currentActive = liActive;

                if (updateScroll) that.$menuInner[0].scrollTop = offset;

                if (that.options.liveSearch) {
                    that.$searchbox.trigger('focus');
                } else {
                    $this.trigger('focus');
                }
            } else if (
                (!$this.is('input') && !REGEXP_TAB_OR_ESCAPE.test(e.which)) ||
                (e.which === keyCodes.SPACE && that.selectpicker.keydown.keyHistory)
            ) {
                var searchMatch,
                    matches = [],
                    keyHistory;

                e.preventDefault();

                that.selectpicker.keydown.keyHistory += keyCodeMap[e.which];

                if (that.selectpicker.keydown.resetKeyHistory.cancel) clearTimeout(that.selectpicker.keydown.resetKeyHistory.cancel);
                that.selectpicker.keydown.resetKeyHistory.cancel = that.selectpicker.keydown.resetKeyHistory.start();

                keyHistory = that.selectpicker.keydown.keyHistory;

                // if all letters are the same, set keyHistory to just the first character when searching
                if (/^(.)\1+$/.test(keyHistory)) {
                    keyHistory = keyHistory.charAt(0);
                }

                // find matches
                for (var i = 0; i < that.selectpicker.current.data.length; i++) {
                    var li = that.selectpicker.current.data[i],
                        hasMatch;

                    hasMatch = stringSearch(li, keyHistory, 'startsWith', true);

                    if (hasMatch && that.selectpicker.view.canHighlight[i]) {
                        matches.push(li.index);
                    }
                }

                if (matches.length) {
                    var matchIndex = 0;

                    $items.removeClass('active').find('a').removeClass('active');

                    // either only one key has been pressed or they are all the same key
                    if (keyHistory.length === 1) {
                        matchIndex = matches.indexOf(that.activeIndex);

                        if (matchIndex === -1 || matchIndex === matches.length - 1) {
                            matchIndex = 0;
                        } else {
                            matchIndex++;
                        }
                    }

                    searchMatch = matches[matchIndex];

                    activeLi = that.selectpicker.main.data[searchMatch];

                    if (scrollTop - activeLi.position > 0) {
                        offset = activeLi.position - activeLi.height;
                        updateScroll = true;
                    } else {
                        offset = activeLi.position - that.sizeInfo.menuInnerHeight;
                        // if the option is already visible at the current scroll position, just keep it the same
                        updateScroll = activeLi.position > scrollTop + that.sizeInfo.menuInnerHeight;
                    }

                    liActive = that.selectpicker.main.elements[searchMatch];

                    that.activeIndex = matches[matchIndex];

                    that.focusItem(liActive);

                    if (liActive) liActive.firstChild.focus();

                    if (updateScroll) that.$menuInner[0].scrollTop = offset;

                    $this.trigger('focus');
                }
            }

            // Select focused option if "Enter", "Spacebar" or "Tab" (when selectOnTab is true) are pressed inside the menu.
            if (
                isActive &&
                (
                    (e.which === keyCodes.SPACE && !that.selectpicker.keydown.keyHistory) ||
                    e.which === keyCodes.ENTER ||
                    (e.which === keyCodes.TAB && that.options.selectOnTab)
                )
            ) {
                if (e.which !== keyCodes.SPACE) e.preventDefault();

                if (!that.options.liveSearch || e.which !== keyCodes.SPACE) {
                    that.$menuInner.find('.active a').trigger('click', true); // retain active class
                    $this.trigger('focus');

                    if (!that.options.liveSearch) {
                        // Prevent screen from scrolling if the user hits the spacebar
                        e.preventDefault();
                        // Fixes spacebar selection of dropdown items in FF & IE
                        $(document).data('spaceSelect', true);
                    }
                }
            }
        },

        mobile: function () {
            // ensure mobile is set to true if mobile function is called after init
            this.options.mobile = true;
            this.$element[0].classList.add('mobile-device');
        },

        refresh: function () {
            var that = this;
            // update options if data attributes have been changed
            var config = $.extend({}, this.options, getAttributesObject(this.$element), this.$element.data()); // in this order on refresh, as user may change attributes on select, and options object is not passed on refresh
            this.options = config;

            if (this.options.source.data) {
                this.render();
                this.buildList();
            } else {
                this.fetchData(function () {
                    that.render();
                    that.buildList();
                });
            }

            this.checkDisabled();
            this.setStyle();
            this.setWidth();

            this.setSize(true);

            this.$element.trigger('refreshed' + EVENT_KEY);
        },

        hide: function () {
            this.$newElement.hide();
        },

        show: function () {
            this.$newElement.show();
        },

        remove: function () {
            this.$newElement.remove();
            this.$element.remove();
        },

        destroy: function () {
            this.$newElement.before(this.$element).remove();

            if (this.$bsContainer) {
                this.$bsContainer.remove();
            } else {
                this.$menu.remove();
            }

            if (this.selectpicker.view.titleOption && this.selectpicker.view.titleOption.parentNode) {
                this.selectpicker.view.titleOption.parentNode.removeChild(this.selectpicker.view.titleOption);
            }

            this.$element
                .off(EVENT_KEY)
                .removeData('selectpicker')
                .removeClass('bs-select-hidden selectpicker mobile-device');

            $(window).off(EVENT_KEY + '.' + this.selectId);
        }
    };

    // SELECTPICKER PLUGIN DEFINITION
    // ==============================
    function Plugin (option) {
        // get the args of the outer function..
        var args = arguments;
        // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them
        // to get lost/corrupted in android 2.3 and IE9 #715 #775
        var _option = option;

        [].shift.apply(args);

        // if the version was not set successfully
        if (!version.success) {
            // try to retreive it again
            try {
                version.full = (getVersion() || '').split(' ')[0].split('.');
            } catch (err) {
                // fall back to use BootstrapVersion if set
                if (Selectpicker.BootstrapVersion) {
                    version.full = Selectpicker.BootstrapVersion.split(' ')[0].split('.');
                } else {
                    version.full = [version.major, '0', '0'];

                    console.warn(
                        'There was an issue retrieving Bootstrap\'s version. ' +
                        'Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision. ' +
                        'If loading Bootstrap asynchronously, the version may need to be manually specified via $.fn.selectpicker.Constructor.BootstrapVersion.',
                        err
                    );
                }
            }

            version.major = version.full[0];
            version.success = true;
        }

        if (version.major >= '4') {
            // some defaults need to be changed if using Bootstrap 4
            // check to see if they have already been manually changed before forcing them to update
            var toUpdate = [];

            if (Selectpicker.DEFAULTS.style === classNames.BUTTONCLASS) toUpdate.push({ name: 'style', className: 'BUTTONCLASS' });
            if (Selectpicker.DEFAULTS.iconBase === classNames.ICONBASE) toUpdate.push({ name: 'iconBase', className: 'ICONBASE' });
            if (Selectpicker.DEFAULTS.tickIcon === classNames.TICKICON) toUpdate.push({ name: 'tickIcon', className: 'TICKICON' });

            classNames.DIVIDER = 'dropdown-divider';
            classNames.SHOW = 'show';
            classNames.BUTTONCLASS = 'btn-light';
            classNames.POPOVERHEADER = 'popover-header';
            classNames.ICONBASE = '';
            classNames.TICKICON = 'bs-ok-default';

            for (var i = 0; i < toUpdate.length; i++) {
                var option = toUpdate[i];
                Selectpicker.DEFAULTS[option.name] = classNames[option.className];
            }
        }

        if (version.major > '4') {
            Selector.DATA_TOGGLE = 'data-bs-toggle="dropdown"';
        }

        var value;
        var chain = this.each(function () {
            var $this = $(this);
            if ($this.is('select')) {
                var data = $this.data('selectpicker'),
                    options = typeof _option == 'object' && _option;

                // for backwards compatibility
                // (using title as placeholder is deprecated - remove in v2.0.0)
                if (options.title) options.placeholder = options.title;

                if (!data) {
                    var dataAttributes = $this.data();

                    for (var dataAttr in dataAttributes) {
                        if (Object.prototype.hasOwnProperty.call(dataAttributes, dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
                            delete dataAttributes[dataAttr];
                        }
                    }

                    var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, getAttributesObject($this), dataAttributes, options); // this is correct order on initial render
                    config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template);
                    $this.data('selectpicker', (data = new Selectpicker(this, config)));
                } else if (options) {
                    for (var i in options) {
                        if (Object.prototype.hasOwnProperty.call(options, i)) {
                            data.options[i] = options[i];
                        }
                    }
                }

                if (typeof _option == 'string') {
                    if (data[_option] instanceof Function) {
                        value = data[_option].apply(data, args);
                    } else {
                        value = data.options[_option];
                    }
                }
            }
        });

        if (typeof value !== 'undefined') {
            // noinspection JSUnusedAssignment
            return value;
        } else {
            return chain;
        }
    }

    var old = $.fn.selectpicker;
    $.fn.selectpicker = Plugin;
    $.fn.selectpicker.Constructor = Selectpicker;

    // SELECTPICKER NO CONFLICT
    // ========================
    $.fn.selectpicker.noConflict = function () {
        $.fn.selectpicker = old;
        return this;
    };

    // get Bootstrap's keydown event handler for either Bootstrap 4 or Bootstrap 3
    function keydownHandler () {
        if (version.major < 5) {
            if ($.fn.dropdown) {
                // wait to define until function is called in case Bootstrap isn't loaded yet
                var bootstrapKeydown = $.fn.dropdown.Constructor._dataApiKeydownHandler || $.fn.dropdown.Constructor.prototype.keydown;
                return bootstrapKeydown.apply(this, arguments);
            }
        } else {
            return Dropdown.dataApiKeydownHandler;
        }
    }

    $(document)
        .off('keydown.bs.dropdown.data-api')
        .on('keydown.bs.dropdown.data-api', ':not(.bootstrap-select) > [' + Selector.DATA_TOGGLE + ']', keydownHandler)
        .on('keydown.bs.dropdown.data-api', ':not(.bootstrap-select) > .dropdown-menu', keydownHandler)
        .on('keydown' + EVENT_KEY, '.bootstrap-select [' + Selector.DATA_TOGGLE + '], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', Selectpicker.prototype.keydown)
        .on('focusin.modal', '.bootstrap-select [' + Selector.DATA_TOGGLE + '], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', function (e) {
            e.stopPropagation();
        });

    // SELECTPICKER DATA-API
    // =====================
    document.addEventListener('DOMContentLoaded', function () {
        $('.selectpicker').each(function () {
            var $selectpicker = $(this);
            Plugin.call($selectpicker, $selectpicker.data());
        });
    });
})(jQuery);


// Lightbox
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var o in n)("object"==typeof exports?exports:e)[o]=n[o]}}(window,(function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o,r="fslightbox-",i="".concat(r,"styles"),s="".concat(r,"cursor-grabbing"),c="".concat(r,"full-dimension"),a="".concat(r,"flex-centered"),l="".concat(r,"open"),u="".concat(r,"transform-transition"),d="".concat(r,"absoluted"),p="".concat(r,"slide-btn"),f="".concat(p,"-container"),h="".concat(r,"fade-in"),m="".concat(r,"fade-out"),g=h+"-strong",v=m+"-strong",b="".concat(r,"opacity-"),x="".concat(b,"1"),y="".concat(r,"source");function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}"object"===("undefined"==typeof document?"undefined":S(document))&&((o=document.createElement("style")).className=i,o.appendChild(document.createTextNode(".fslightbox-absoluted{position:absolute;top:0;left:0}.fslightbox-fade-in{animation:fslightbox-fade-in .3s cubic-bezier(0,0,.7,1)}.fslightbox-fade-out{animation:fslightbox-fade-out .3s ease}.fslightbox-fade-in-strong{animation:fslightbox-fade-in-strong .3s cubic-bezier(0,0,.7,1)}.fslightbox-fade-out-strong{animation:fslightbox-fade-out-strong .3s ease}@keyframes fslightbox-fade-in{from{opacity:.65}to{opacity:1}}@keyframes fslightbox-fade-out{from{opacity:.35}to{opacity:0}}@keyframes fslightbox-fade-in-strong{from{opacity:.3}to{opacity:1}}@keyframes fslightbox-fade-out-strong{from{opacity:1}to{opacity:0}}.fslightbox-cursor-grabbing{cursor:grabbing}.fslightbox-full-dimension{width:100%;height:100%}.fslightbox-open{overflow:hidden;height:100%}.fslightbox-flex-centered{display:flex;justify-content:center;align-items:center}.fslightbox-opacity-0{opacity:0!important}.fslightbox-opacity-1{opacity:1!important}.fslightbox-scrollbarfix{padding-right:17px}.fslightbox-transform-transition{transition:transform .3s}.fslightbox-container{font-family:Arial,sans-serif;position:fixed;top:0;left:0;background:linear-gradient(rgba(30,30,30,.9),#000 1810%);touch-action:pinch-zoom;z-index:1000000000;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.fslightbox-container *{box-sizing:border-box}.fslightbox-svg-path{transition:fill .15s ease;fill:#ddd}.fslightbox-nav{height:45px;width:100%;position:absolute;top:0;left:0}.fslightbox-slide-number-container{display:flex;justify-content:center;align-items:center;position:relative;height:100%;font-size:15px;color:#d7d7d7;z-index:0;max-width:55px;text-align:left}.fslightbox-slide-number-container .fslightbox-flex-centered{height:100%}.fslightbox-slash{display:block;margin:0 5px;width:1px;height:12px;transform:rotate(15deg);background:#fff}.fslightbox-toolbar{position:absolute;z-index:3;right:0;top:0;height:100%;display:flex;background:rgba(35,35,35,.65)}.fslightbox-toolbar-button{height:100%;width:45px;cursor:pointer}.fslightbox-toolbar-button:hover .fslightbox-svg-path{fill:#fff}.fslightbox-slide-btn-container{display:flex;align-items:center;padding:12px 12px 12px 6px;position:absolute;top:50%;cursor:pointer;z-index:3;transform:translateY(-50%)}@media (min-width:476px){.fslightbox-slide-btn-container{padding:22px 22px 22px 6px}}@media (min-width:768px){.fslightbox-slide-btn-container{padding:30px 30px 30px 6px}}.fslightbox-slide-btn-container:hover .fslightbox-svg-path{fill:#f1f1f1}.fslightbox-slide-btn{padding:9px;font-size:26px;background:rgba(35,35,35,.65)}@media (min-width:768px){.fslightbox-slide-btn{padding:10px}}@media (min-width:1600px){.fslightbox-slide-btn{padding:11px}}.fslightbox-slide-btn-container-previous{left:0}@media (max-width:475.99px){.fslightbox-slide-btn-container-previous{padding-left:3px}}.fslightbox-slide-btn-container-next{right:0;padding-left:12px;padding-right:3px}@media (min-width:476px){.fslightbox-slide-btn-container-next{padding-left:22px}}@media (min-width:768px){.fslightbox-slide-btn-container-next{padding-left:30px}}@media (min-width:476px){.fslightbox-slide-btn-container-next{padding-right:6px}}.fslightbox-down-event-detector{position:absolute;z-index:1}.fslightbox-slide-swiping-hoverer{z-index:4}.fslightbox-invalid-file-wrapper{font-size:22px;color:#eaebeb;margin:auto}.fslightbox-video{object-fit:cover}.fslightbox-youtube-iframe{border:0}.fslightbox-loader{display:block;margin:auto;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:67px;height:67px}.fslightbox-loader div{box-sizing:border-box;display:block;position:absolute;width:54px;height:54px;margin:6px;border:5px solid;border-color:#999 transparent transparent transparent;border-radius:50%;animation:fslightbox-loader 1.2s cubic-bezier(.5,0,.5,1) infinite}.fslightbox-loader div:nth-child(1){animation-delay:-.45s}.fslightbox-loader div:nth-child(2){animation-delay:-.3s}.fslightbox-loader div:nth-child(3){animation-delay:-.15s}@keyframes fslightbox-loader{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}.fslightbox-source{position:relative;z-index:2;opacity:0}")),document.head.appendChild(o));function w(e){var t,n=e.props,o=0,r={};this.getSourceTypeFromLocalStorageByUrl=function(e){return t[e]?t[e]:i(e)},this.handleReceivedSourceTypeForUrl=function(e,n){!1===r[n]&&(o--,"invalid"!==e?r[n]=e:delete r[n],0===o&&(!function(e,t){for(var n in t)e[n]=t[n]}(t,r),localStorage.setItem("fslightbox-types",JSON.stringify(t))))};var i=function(e){o++,r[e]=!1};n.disableLocalStorage?(this.getSourceTypeFromLocalStorageByUrl=function(){},this.handleReceivedSourceTypeForUrl=function(){}):(t=JSON.parse(localStorage.getItem("fslightbox-types")))||(t={},this.getSourceTypeFromLocalStorageByUrl=i)}function L(e,t,n,o){var r=e.data,i=e.elements.sources,s=n/o,c=0;this.adjustSize=function(){if((c=r.maxSourceWidth/s)<r.maxSourceHeight)return n<r.maxSourceWidth&&(c=o),a();c=o>r.maxSourceHeight?r.maxSourceHeight:o,a()};var a=function(){i[t].style.width=c*s+"px",i[t].style.height=c+"px"}}function C(e,t){var n=this,o=e.collections.sourceSizers,r=e.elements,i=r.sourceAnimationWrappers,s=r.sourceMainWrappers,c=r.sources,a=e.resolve;function l(e,n){o[t]=a(L,[t,e,n]),o[t].adjustSize()}this.runActions=function(e,o){c[t].classList.add(x),i[t].classList.add(g),s[t].removeChild(s[t].firstChild),l(e,o),n.runActions=l}}function F(e,t){var n,o=this,r=e.elements.sources,i=e.props,s=(0,e.resolve)(C,[t]);this.handleImageLoad=function(e){var t=e.target,n=t.naturalWidth,o=t.naturalHeight;s.runActions(n,o)},this.handleVideoLoad=function(e){var t=e.target,o=t.videoWidth,r=t.videoHeight;n=!0,s.runActions(o,r)},this.handleNotMetaDatedVideoLoad=function(){n||o.handleYoutubeLoad()},this.handleYoutubeLoad=function(){var e=1920,t=1080;i.maxYoutubeDimensions&&(e=i.maxYoutubeDimensions.width,t=i.maxYoutubeDimensions.height),s.runActions(e,t)},this.handleCustomLoad=function(){setTimeout((function(){var e=r[t];s.runActions(e.offsetWidth,e.offsetHeight)}))}}function A(e,t,n){var o=e.elements.sources,r=e.props.customClasses,i=r[t]?r[t]:"";o[t].className=n+" "+i}function I(e,t){var n=e.elements.sources,o=e.props.customAttributes;for(var r in o[t])n[t].setAttribute(r,o[t][r])}function T(e,t){var n=e.collections.sourceLoadHandlers,o=e.elements,r=o.sources,i=o.sourceAnimationWrappers,s=e.props.sources;r[t]=document.createElement("img"),A(e,t,y),r[t].src=s[t],r[t].onload=n[t].handleImageLoad,I(e,t),i[t].appendChild(r[t])}function E(e,t){var n=e.collections.sourceLoadHandlers,o=e.elements,r=o.sources,i=o.sourceAnimationWrappers,s=e.props,c=s.sources,a=s.videosPosters;r[t]=document.createElement("video"),A(e,t,y),r[t].src=c[t],r[t].onloadedmetadata=function(e){n[t].handleVideoLoad(e)},r[t].controls=!0,I(e,t),a[t]&&(r[t].poster=a[t]);var l=document.createElement("source");l.src=c[t],r[t].appendChild(l),setTimeout(n[t].handleNotMetaDatedVideoLoad,3e3),i[t].appendChild(r[t])}function N(e,t){var n=e.collections.sourceLoadHandlers,o=e.elements,i=o.sources,s=o.sourceAnimationWrappers,c=e.props.sources;i[t]=document.createElement("iframe"),A(e,t,"".concat(y," ").concat(r,"youtube-iframe")),i[t].src="https://www.youtube.com/embed/".concat(c[t].match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/)[2],"?enablejsapi=1"),i[t].allowFullscreen=!0,I(e,t),s[t].appendChild(i[t]),n[t].handleYoutubeLoad()}function W(e,t){var n=e.collections.sourceLoadHandlers,o=e.elements,r=o.sources,i=o.sourceAnimationWrappers,s=e.props.sources;r[t]=s[t],A(e,t,"".concat(r[t].className," ").concat(y)),i[t].appendChild(r[t]),n[t].handleCustomLoad()}function z(e,t){var n=e.elements,o=n.sources,i=n.sourceAnimationWrappers,s=n.sourceMainWrappers;e.props.sources;o[t]=document.createElement("div"),o[t].className="".concat(r,"invalid-file-wrapper ").concat(a),o[t].innerHTML="Invalid source",i[t].classList.add(g),i[t].appendChild(o[t]),s[t].removeChild(s[t].firstChild)}function M(e){var t=e.collections,n=t.sourceLoadHandlers,o=t.sourcesRenderFunctions,r=e.core.sourceDisplayFacade,i=e.resolve;this.runActionsForSourceTypeAndIndex=function(t,s){var c;switch("invalid"!==t&&(n[s]=i(F,[s])),t){case"image":c=T;break;case"video":c=E;break;case"youtube":c=N;break;case"custom":c=W;break;default:c=z}o[s]=function(){return c(e,s)},r.displaySourcesWhichShouldBeDisplayed()}}function P(){var e,t,n,o={isUrlYoutubeOne:function(e){var t=document.createElement("a");return t.href=e,"www.youtube.com"===t.hostname},getTypeFromResponseContentType:function(e){return e.slice(0,e.indexOf("/"))}};function r(){if(4!==n.readyState){if(2===n.readyState){var e;switch(o.getTypeFromResponseContentType(n.getResponseHeader("content-type"))){case"image":e="image";break;case"video":e="video";break;default:e="invalid"}n.onreadystatechange=null,n.abort(),t(e)}}else t("invalid")}this.setUrlToCheck=function(t){e=t},this.getSourceType=function(i){if(o.isUrlYoutubeOne(e))return i("youtube");t=i,(n=new XMLHttpRequest).onreadystatechange=r,n.open("GET",e,!0),n.send()}}function H(e,t,n){var o=e.props,r=o.types,i=o.type,s=o.sources,c=e.resolve;this.getTypeSetByClientForIndex=function(e){var t;return r&&r[e]?t=r[e]:i&&(t=i),t},this.retrieveTypeWithXhrForIndex=function(e){var o=c(P);o.setUrlToCheck(s[e]),o.getSourceType((function(o){t.handleReceivedSourceTypeForUrl(o,s[e]),n.runActionsForSourceTypeAndIndex(o,e)}))}}function k(e,t){var n=e.componentsServices.hideSourceLoaderIfNotYetCollection,o=e.elements,r=o.sourceWrappersContainer,i=o.sourceMainWrappers;i[t]=document.createElement("div"),i[t].className="".concat(d," ").concat(c," ").concat(a),i[t].innerHTML='<div class="fslightbox-loader"><div></div><div></div><div></div><div></div></div>';var s=i[t].firstChild;n[t]=function(){i[t].contains(s)&&i[t].removeChild(s)},r.appendChild(i[t]),function(e,t){var n=e.elements,o=n.sourceMainWrappers,r=n.sourceAnimationWrappers;r[t]=document.createElement("div"),o[t].appendChild(r[t])}(e,t)}function O(e,t,n,o){var i=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttributeNS(null,"width",t),i.setAttributeNS(null,"height",t),i.setAttributeNS(null,"viewBox",n);var s=document.createElementNS("http://www.w3.org/2000/svg","path");return s.setAttributeNS(null,"class","".concat(r,"svg-path")),s.setAttributeNS(null,"d",o),i.appendChild(s),e.appendChild(i),i}function R(e,t){var n=document.createElement("div");return n.className="".concat(r,"toolbar-button ").concat(a),n.title=t,e.appendChild(n),n}function D(e,t){var n=document.createElement("div");n.className="".concat(r,"toolbar"),t.appendChild(n),function(e,t){var n=e.componentsServices,o=e.core.fullscreenToggler,r=e.data,i="M4.5 11H3v4h4v-1.5H4.5V11zM3 7h1.5V4.5H7V3H3v4zm10.5 6.5H11V15h4v-4h-1.5v2.5zM11 3v1.5h2.5V7H15V3h-4z",s=R(t);s.title="Enter fullscreen";var c=O(s,"20px","0 0 18 18",i);n.enterFullscreen=function(){r.isFullscreenOpen=!0,s.title="Exit fullscreen",c.setAttributeNS(null,"width","24px"),c.setAttributeNS(null,"height","24px"),c.setAttributeNS(null,"viewBox","0 0 950 1024"),c.firstChild.setAttributeNS(null,"d","M682 342h128v84h-212v-212h84v128zM598 810v-212h212v84h-128v128h-84zM342 342v-128h84v212h-212v-84h128zM214 682v-84h212v212h-84v-128h-128z")},n.exitFullscreen=function(){r.isFullscreenOpen=!1,s.title="Enter fullscreen",c.setAttributeNS(null,"width","20px"),c.setAttributeNS(null,"height","20px"),c.setAttributeNS(null,"viewBox","0 0 18 18"),c.firstChild.setAttributeNS(null,"d",i)},s.onclick=function(){r.isFullscreenOpen?o.exitFullscreen():o.enterFullscreen()}}(e,n),function(e,t){var n=R(t,"Close");n.onclick=e.core.lightboxCloser.closeLightbox,O(n,"20px","0 0 24 24","M 4.7070312 3.2929688 L 3.2929688 4.7070312 L 10.585938 12 L 3.2929688 19.292969 L 4.7070312 20.707031 L 12 13.414062 L 19.292969 20.707031 L 20.707031 19.292969 L 13.414062 12 L 20.707031 4.7070312 L 19.292969 3.2929688 L 12 10.585938 L 4.7070312 3.2929688 z")}(e,n)}function j(e){var t=e.props.sources,n=e.elements.container,o=document.createElement("div");o.className="".concat(r,"nav"),n.appendChild(o),D(e,o),t.length>1&&function(e,t){var n=e.componentsServices,o=e.props.sources,i=(e.stageIndexes,document.createElement("div"));i.className="".concat(r,"slide-number-container");var s=document.createElement("div");s.className=a;var c=document.createElement("span");n.setSlideNumber=function(e){return c.innerHTML=e};var l=document.createElement("span");l.className="".concat(r,"slash");var u=document.createElement("div");u.innerHTML=o.length,i.appendChild(s),s.appendChild(c),s.appendChild(l),s.appendChild(u),t.appendChild(i),setTimeout((function(){s.offsetWidth>55&&(i.style.justifyContent="flex-start")}))}(e,o)}function X(e,t){var n=this,o=e.elements.sourceMainWrappers,r=e.props,i=0;this.byValue=function(e){return i=e,n},this.negative=function(){s(-c())},this.zero=function(){s(0)},this.positive=function(){s(c())};var s=function(e){o[t].style.transform="translateX(".concat(e+i,"px)"),i=0},c=function(){return(1+r.slideDistance)*innerWidth}}function B(e,t,n,o){var r=e.elements.container,i=n.charAt(0).toUpperCase()+n.slice(1),s=document.createElement("div");s.className="".concat(f," ").concat(f,"-").concat(n),s.title="".concat(i," slide"),s.onclick=t,function(e,t){var n=document.createElement("div");n.className="".concat(p," ").concat(a),O(n,"20px","0 0 20 20",t),e.appendChild(n)}(s,o),r.appendChild(s)}function U(e,t){var n=e.classList;n.contains(t)&&n.remove(t)}function V(e){var t=this,n=e.core,o=n.eventsDispatcher,r=n.fullscreenToggler,i=n.globalEventsController,s=n.scrollbarRecompensor,c=e.data,a=e.elements,u=e.props,d=e.sourcePointerProps;this.isLightboxFadingOut=!1,this.runActions=function(){t.isLightboxFadingOut=!0,a.container.classList.add(v),i.removeListeners(),u.exitFullscreenOnClose&&c.isFullscreenOpen&&r.exitFullscreen(),setTimeout((function(){t.isLightboxFadingOut=!1,d.isPointering=!1,a.container.classList.remove(v),document.documentElement.classList.remove(l),s.removeRecompense(),document.body.removeChild(a.container),o.dispatch("onClose")}),270)}}function Y(e){var t,n,o,r=e.collections.sourceMainWrappersTransformers,i=e.componentsServices,s=e.core,c=s.classFacade,a=s.slideIndexChanger,l=s.sourceDisplayFacade,d=s.stageManager,p=e.elements.sourceAnimationWrappers,f=e.stageIndexes,v=(t=function(){c.removeFromEachElementClassIfContains("sourceAnimationWrappers",m)},n=300,o=[],function(){o.push(!0),setTimeout((function(){o.pop(),o.length||t()}),n)});a.changeTo=function(e){f.current=e,d.updateStageIndexes(),i.setSlideNumber(e+1),l.displaySourcesWhichShouldBeDisplayed()},a.jumpTo=function(e){var t=f.current;a.changeTo(e),c.removeFromEachElementClassIfContains("sourceMainWrappers",u),U(p[t],g),U(p[t],h),p[t].classList.add(m),U(p[e],g),U(p[e],m),p[e].classList.add(h),v(),r[e].zero(),setTimeout((function(){t!==f.current&&r[t].negative()}),270)}}function _(e){var t=e.core,n=t.lightboxCloser,o=t.fullscreenToggler,r=t.slideChangeFacade;this.listener=function(e){switch(e.key){case"Escape":n.closeLightbox();break;case"ArrowLeft":r.changeToPrevious();break;case"ArrowRight":r.changeToNext();break;case"F11":e.preventDefault(),o.enterFullscreen()}}}function q(e){var t=e.collections.sourceMainWrappersTransformers,n=e.elements,o=e.sourcePointerProps,r=e.stageIndexes;function i(e,n){t[e].byValue(o.swipedX)[n]()}this.runActionsForEvent=function(e){var t,c,a;n.container.contains(n.slideSwipingHoverer)||n.container.appendChild(n.slideSwipingHoverer),t=n.container,c=s,(a=t.classList).contains(c)||a.add(c),o.swipedX=e.screenX-o.downScreenX,i(r.current,"zero"),void 0!==r.previous&&o.swipedX>0?i(r.previous,"negative"):void 0!==r.next&&o.swipedX<0&&i(r.next,"positive")}}function J(e){var t=e.props.sources,n=e.resolve,o=e.sourcePointerProps,r=n(q);1===t.length?this.listener=function(){o.swipedX=1}:this.listener=function(e){o.isPointering&&r.runActionsForEvent(e)}}function G(e){var t=e.collections.sourceMainWrappersTransformers,n=e.core.slideIndexChanger,o=e.elements.sourceMainWrappers,r=e.stageIndexes;this.runPositiveSwipedXActions=function(){void 0===r.previous||(i("positive"),n.changeTo(r.previous)),i("zero")},this.runNegativeSwipedXActions=function(){void 0===r.next||(i("negative"),n.changeTo(r.next)),i("zero")};var i=function(e){o[r.current].classList.add(u),t[r.current][e]()}}function $(e,t){e.contains(t)&&e.removeChild(t)}function K(e){var t=e.core.lightboxCloser,n=e.elements,o=e.resolve,r=e.sourcePointerProps,i=o(G);this.runNoSwipeActions=function(){$(n.container,n.slideSwipingHoverer),r.isSourceDownEventTarget||t.closeLightbox(),r.isPointering=!1},this.runActions=function(){r.swipedX>0?i.runPositiveSwipedXActions():i.runNegativeSwipedXActions(),$(n.container,n.slideSwipingHoverer),n.container.classList.remove(s),r.isPointering=!1}}function Q(e){var t=e.resolve,n=e.sourcePointerProps,o=t(K);this.listener=function(){n.isPointering&&(n.swipedX?o.runActions():o.runNoSwipeActions())}}function Z(e){var t,n,o;n=(t=e).core.classFacade,o=t.elements,n.removeFromEachElementClassIfContains=function(e,t){for(var n=0;n<o[e].length;n++)U(o[e][n],t)},function(e){var t=e.core.eventsDispatcher,n=e.props;t.dispatch=function(e){n[e]&&n[e]()}}(e),function(e){var t=e.componentsServices,n=e.core.fullscreenToggler;n.enterFullscreen=function(){t.enterFullscreen();var e=document.documentElement;e.requestFullscreen?e.requestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen()},n.exitFullscreen=function(){t.exitFullscreen(),document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.msExitFullscreen&&document.msExitFullscreen()}}(e),function(e){var t=e.core,n=t.globalEventsController,o=t.windowResizeActioner,r=e.resolve,i=r(_),s=r(J),c=r(Q);n.attachListeners=function(){document.addEventListener("pointermove",s.listener),document.addEventListener("pointerup",c.listener),addEventListener("resize",o.runActions),document.addEventListener("keydown",i.listener)},n.removeListeners=function(){document.removeEventListener("pointermove",s.listener),document.removeEventListener("pointerup",c.listener),removeEventListener("resize",o.runActions),document.removeEventListener("keydown",i.listener)}}(e),function(e){var t=e.core.lightboxCloser,n=(0,e.resolve)(V);t.closeLightbox=function(){n.isLightboxFadingOut||n.runActions()}}(e),ne(e),function(e){var t=e.data,n=e.core.scrollbarRecompensor;function o(){document.body.offsetHeight>innerHeight&&(document.body.style.marginRight=t.scrollbarWidth+"px")}n.addRecompense=function(){"complete"===document.readyState?o():addEventListener("load",(function(){o(),n.addRecompense=o}))},n.removeRecompense=function(){document.body.style.removeProperty("margin-right")}}(e),function(e){var t=e.core,n=t.slideChangeFacade,o=t.slideIndexChanger,r=t.stageManager;e.props.sources.length>1?(n.changeToPrevious=function(){o.jumpTo(r.getPreviousSlideIndex())},n.changeToNext=function(){o.jumpTo(r.getNextSlideIndex())}):(n.changeToPrevious=function(){},n.changeToNext=function(){})}(e),Y(e),function(e){var t=e.core,n=t.classFacade,o=t.sourcesPointerDown,r=e.elements.sources,i=e.sourcePointerProps,s=e.stageIndexes;o.listener=function(e){"VIDEO"!==e.target.tagName&&e.preventDefault(),i.isPointering=!0,i.downScreenX=e.screenX,i.swipedX=0;var t=r[s.current];t&&t.contains(e.target)?i.isSourceDownEventTarget=!0:i.isSourceDownEventTarget=!1,n.removeFromEachElementClassIfContains("sourceMainWrappers",u)}}(e),function(e){var t=e.collections.sourcesRenderFunctions,n=e.core.sourceDisplayFacade,o=e.props,r=e.stageIndexes;function i(e){t[e]&&(t[e](),delete t[e])}n.displaySourcesWhichShouldBeDisplayed=function(){if(o.loadOnlyCurrentSource)i(r.current);else for(var e in r)i(r[e])}}(e),function(e){var t=e.stageIndexes,n=e.core.stageManager,o=e.props.sources.length-1;n.getPreviousSlideIndex=function(){return 0===t.current?o:t.current-1},n.getNextSlideIndex=function(){return t.current===o?0:t.current+1},n.updateStageIndexes=0===o?function(){}:1===o?function(){0===t.current?(t.next=1,delete t.previous):(t.previous=0,delete t.next)}:function(){t.previous=n.getPreviousSlideIndex(),t.next=n.getNextSlideIndex()},n.isSourceInStage=o<=2?function(){return!0}:function(e){var n=t.current;if(0===n&&e===o||n===o&&0===e)return!0;var r=n-e;return-1===r||0===r||1===r}}(e),function(e){var t=e.collections,n=t.sourceMainWrappersTransformers,o=t.sourceSizers,r=e.core.windowResizeActioner,i=e.data,s=e.elements.sourceMainWrappers,c=e.props,a=e.stageIndexes;r.runActions=function(){innerWidth<992?i.maxSourceWidth=innerWidth:i.maxSourceWidth=.9*innerWidth,i.maxSourceHeight=.9*innerHeight;for(var e=0;e<c.sources.length;e++)U(s[e],u),e!==a.current&&n[e].negative(),o[e]&&o[e].adjustSize()}}(e)}function ee(e){var t=e.props.disableLocalStorage;if(!t){var n=localStorage.getItem("fslightbox-scrollbar-width");if(n)return n}var o=function(){var e=document.createElement("div"),t=e.style;return t.visibility="hidden",t.width="100px",t.msOverflowStyle="scrollbar",t.overflow="scroll",e}(),r=function(){var e=document.createElement("div");return e.style.width="100%",e}();document.body.appendChild(o);var i=o.offsetWidth;o.appendChild(r);var s=r.offsetWidth;document.body.removeChild(o);var c=i-s;return t||localStorage.setItem("fslightbox-scrollbar-width",c.toString()),c}function te(e){var t=e.core.eventsDispatcher,n=e.data,o=e.elements,i=e.props.sources;n.isInitialized=!0,n.scrollbarWidth=ee(e),function(e){for(var t=e.collections.sourceMainWrappersTransformers,n=e.props.sources,o=e.resolve,r=0;r<n.length;r++)t[r]=o(X,[r])}(e),Z(e),o.container=document.createElement("div"),o.container.className="".concat(r,"container ").concat(c," ").concat(g),function(e){var t=e.elements;t.slideSwipingHoverer=document.createElement("div"),t.slideSwipingHoverer.className="".concat(r,"slide-swiping-hoverer ").concat(c," ").concat(d)}(e),j(e),function(e){var t=e.core.sourcesPointerDown,n=e.elements,o=e.props.sources,r=document.createElement("div");r.className="".concat(d," ").concat(c),n.container.appendChild(r),r.addEventListener("pointerdown",t.listener),n.sourceWrappersContainer=r;for(var i=0;i<o.length;i++)k(e,i)}(e),i.length>1&&function(e){var t=e.core.slideChangeFacade;B(e,t.changeToPrevious,"previous","M18.271,9.212H3.615l4.184-4.184c0.306-0.306,0.306-0.801,0-1.107c-0.306-0.306-0.801-0.306-1.107,0L1.21,9.403C1.194,9.417,1.174,9.421,1.158,9.437c-0.181,0.181-0.242,0.425-0.209,0.66c0.005,0.038,0.012,0.071,0.022,0.109c0.028,0.098,0.075,0.188,0.142,0.271c0.021,0.026,0.021,0.061,0.045,0.085c0.015,0.016,0.034,0.02,0.05,0.033l5.484,5.483c0.306,0.307,0.801,0.307,1.107,0c0.306-0.305,0.306-0.801,0-1.105l-4.184-4.185h14.656c0.436,0,0.788-0.353,0.788-0.788S18.707,9.212,18.271,9.212z"),B(e,t.changeToNext,"next","M1.729,9.212h14.656l-4.184-4.184c-0.307-0.306-0.307-0.801,0-1.107c0.305-0.306,0.801-0.306,1.106,0l5.481,5.482c0.018,0.014,0.037,0.019,0.053,0.034c0.181,0.181,0.242,0.425,0.209,0.66c-0.004,0.038-0.012,0.071-0.021,0.109c-0.028,0.098-0.075,0.188-0.143,0.271c-0.021,0.026-0.021,0.061-0.045,0.085c-0.015,0.016-0.034,0.02-0.051,0.033l-5.483,5.483c-0.306,0.307-0.802,0.307-1.106,0c-0.307-0.305-0.307-0.801,0-1.105l4.184-4.185H1.729c-0.436,0-0.788-0.353-0.788-0.788S1.293,9.212,1.729,9.212z")}(e),function(e){for(var t=e.props.sources,n=e.resolve,o=n(w),r=n(M),i=n(H,[o,r]),s=0;s<t.length;s++)if("string"==typeof t[s]){var c=i.getTypeSetByClientForIndex(s);if(c)r.runActionsForSourceTypeAndIndex(c,s);else{var a=o.getSourceTypeFromLocalStorageByUrl(t[s]);a?r.runActionsForSourceTypeAndIndex(a,s):i.retrieveTypeWithXhrForIndex(s)}}else r.runActionsForSourceTypeAndIndex("custom",s)}(e),t.dispatch("onInit")}function ne(e){var t=e.collections.sourceMainWrappersTransformers,n=e.componentsServices,o=e.core,r=o.eventsDispatcher,i=o.lightboxOpener,s=o.globalEventsController,c=o.scrollbarRecompensor,a=o.sourceDisplayFacade,u=o.stageManager,d=o.windowResizeActioner,p=e.data,f=e.elements,h=e.stageIndexes;i.open=function(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;h.current=o,p.isInitialized?r.dispatch("onShow"):te(e),u.updateStageIndexes(),a.displaySourcesWhichShouldBeDisplayed(),n.setSlideNumber(o+1),document.body.appendChild(f.container),document.documentElement.classList.add(l),c.addRecompense(),s.attachListeners(),d.runActions(),t[h.current].zero(),r.dispatch("onOpen")}}function oe(e,t,n){return(oe=re()?Reflect.construct:function(e,t,n){var o=[null];o.push.apply(o,t);var r=new(Function.bind.apply(e,o));return n&&ie(r,n.prototype),r}).apply(null,arguments)}function re(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function ie(e,t){return(ie=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function se(e){return function(e){if(Array.isArray(e))return ce(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ce(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function ae(){for(var e=document.getElementsByTagName("a"),t=function(t){if(!e[t].hasAttribute("data-fslightbox"))return"continue";var n=e[t].getAttribute("data-fslightbox"),o=e[t].getAttribute("href");fsLightboxInstances[n]||(fsLightboxInstances[n]=new FsLightbox);var r=null;"#"===o.charAt(0)?(r=document.getElementById(o.substring(1)).cloneNode(!0)).removeAttribute("id"):r=o,fsLightboxInstances[n].props.sources.push(r),fsLightboxInstances[n].elements.a.push(e[t]);var i=fsLightboxInstances[n].props.sources.length-1;e[t].onclick=function(e){e.preventDefault(),fsLightboxInstances[n].open(i)},d("types","data-type"),d("videosPosters","data-video-poster"),d("customClasses","data-class"),d("customClasses","data-custom-class");for(var s=["href","data-fslightbox","data-type","data-video-poster","data-class","data-custom-class"],c=e[t].attributes,a=fsLightboxInstances[n].props.customAttributes,l=0;l<c.length;l++)if(-1===s.indexOf(c[l].name)&&"data-"===c[l].name.substr(0,5)){a[i]||(a[i]={});var u=c[l].name.substr(5);a[i][u]=c[l].value}function d(o,r){e[t].hasAttribute(r)&&(fsLightboxInstances[n].props[o][i]=e[t].getAttribute(r))}},n=0;n<e.length;n++)t(n);var o=Object.keys(fsLightboxInstances);window.fsLightbox=fsLightboxInstances[o[o.length-1]]}window.FsLightbox=function(){var e=this;this.props={sources:[],customAttributes:[],customClasses:[],types:[],videosPosters:[],slideDistance:.3},this.data={isInitialized:!1,isFullscreenOpen:!1,maxSourceWidth:0,maxSourceHeight:0,scrollbarWidth:0},this.sourcePointerProps={downScreenX:null,isPointering:!1,isSourceDownEventTarget:!1,swipedX:0},this.stageIndexes={},this.elements={a:[],container:null,slideSwipingHoverer:null,sourceWrappersContainer:null,sources:[],sourceMainWrappers:[],sourceAnimationWrappers:[]},this.componentsServices={enterFullscreen:null,exitFullscreen:null,hideSourceLoaderIfNotYetCollection:[],setSlideNumber:function(){}},this.resolve=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return n.unshift(e),oe(t,se(n))},this.collections={sourceMainWrappersTransformers:[],sourceLoadHandlers:[],sourcesRenderFunctions:[],sourceSizers:[]},this.core={classFacade:{},eventsDispatcher:{},fullscreenToggler:{},globalEventsController:{},lightboxCloser:{},lightboxOpener:{},lightboxUpdater:{},scrollbarRecompensor:{},slideChangeFacade:{},slideIndexChanger:{},sourcesPointerDown:{},sourceDisplayFacade:{},stageManager:{},windowResizeActioner:{}},ne(this),this.open=function(t){return e.core.lightboxOpener.open(t)},this.close=function(){return e.core.lightboxCloser.closeLightbox()}},window.fsLightboxInstances={},ae(),window.refreshFsLightbox=function(){for(var e in fsLightboxInstances){var t=fsLightboxInstances[e].props;fsLightboxInstances[e]=new FsLightbox,fsLightboxInstances[e].props=t,fsLightboxInstances[e].props.sources=[],fsLightboxInstances[e].elements.a=[]}ae()}}])}));

document.addEventListener("DOMContentLoaded", function() {
    const header = $('#header');
    const aboveHeight = 20;

    function onScroll() {
        if ($(window).scrollTop() > aboveHeight && !header.hasClass('fixed')) {
            header.addClass('fixed');
            header.css({
                animation: "stickymenu 500ms",
                animationFillMode: "forwards"
            });
        }
        if ($(window).scrollTop() < aboveHeight && header.hasClass('fixed')) {
            header.removeClass('fixed');
            header.removeAttr('style');
        }
    }
    window.addEventListener('scroll', function() {
        requestAnimationFrame(onScroll);
    });

    onScroll();

    const items = document.querySelectorAll(".homepage nav#homepageNav a");
    const sections = document.querySelectorAll('section');

    const observer = new IntersectionObserver((entries) => {
        entries.forEach((e) => {
            if(e.isIntersecting) {
                items.forEach(link => {
                    link.classList.remove('active');
                    if(e.target.id === link.dataset.nav){
                        link.classList.add('active');
                    }
                })
            }
        })
    }, {
        threshold: 0.7,
    });

    sections.forEach((section) => {
        observer.observe(section);
    })

    items.forEach(link => {
        link.addEventListener('click', (e) => {

            let target = e.target.getAttribute('target');
            if(!target){
                e.preventDefault();
                let section = document.getElementById(e.target.dataset.nav);
                let offset = $(section).offset();

                let computedStyle = getComputedStyle(section);
                let padding = parseInt(computedStyle.paddingTop);

                $('html, body').stop().animate({
                    scrollTop: offset.top - aboveHeight + padding - 30
                }, 1500, 'easeInOutExpo', function() {
                    console.log("end");
                    if ($('body').hasClass("openmenu")) {
                        $('body').removeClass("openmenu");
                    }
                });
            }
        });
    });

    var headerHeight = $('#header').outerHeight();
    $(".scroll-to").click(function (e) {
        e.preventDefault();
        const section = $(this).attr('href');
        const offset = $(this).data("offset");
        $('html, body').stop().animate({
            scrollTop: $(section).offset().top - headerHeight - offset
        }, 1500, 'easeInOutExpo');
    });

    $("#triggermenu, .closemenu").click(function(b){
        b.preventDefault();
        $('body').toggleClass('openmenu');
    });
    $("#megamenu-opacity").click(function (event) {
        if ($('body').hasClass("openmenu")) {
            $('body').removeClass("openmenu");
        }
        event.preventDefault();
    });
    // Ruchoma galeria
    $('.col-gallery-thumb').each( function() { $(this).hoverdir(); } );

    // Slider w tekście
    $('.textSlider ul').slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        arrows: true,
        centerMode: true,
        centerPadding: '260px',
    });
});
$(document).ready(function () {
    $('select').selectpicker();
});